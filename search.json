[{"path":"http://victornavarro.org/heidi/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"http://victornavarro.org/heidi/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"http://victornavarro.org/heidi/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"http://victornavarro.org/heidi/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"http://victornavarro.org/heidi/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"http://victornavarro.org/heidi/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"http://victornavarro.org/heidi/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"http://victornavarro.org/heidi/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"http://victornavarro.org/heidi/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"http://victornavarro.org/heidi/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"http://victornavarro.org/heidi/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"http://victornavarro.org/heidi/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"http://victornavarro.org/heidi/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"http://victornavarro.org/heidi/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"http://victornavarro.org/heidi/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"http://victornavarro.org/heidi/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"http://victornavarro.org/heidi/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"http://victornavarro.org/heidi/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"http://victornavarro.org/heidi/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"http://victornavarro.org/heidi/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"http://victornavarro.org/heidi/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"http://victornavarro.org/heidi/articles/fitting_heidi.html","id":"fitting-the-model-to-empirical-data","dir":"Articles","previous_headings":"","what":"Fitting the model to empirical data","title":"fitting_heidi","text":"now fit model empirical data (Patitucci et al., 2016, Experiment 1). involve writing function produces model responses organized like empirical data, using function MLE. begin short overview data, move model function, finally fit model.","code":""},{"path":"http://victornavarro.org/heidi/articles/fitting_heidi.html","id":"the-data","dir":"Articles","previous_headings":"Fitting the model to empirical data","what":"The data","title":"fitting_heidi","text":"data, pati, contains responses (lever presses lp, nose pokes np) 32 subjects (rats) across 6 blocks training (2 sessions per block). animals trained associate two levers one two unconditioned stimuli (pellets sucrose). Let’s take look .  thicker lines group averages; rest individual subjects. ignore specific mapping levers USs , counterbalanced across subjects. However, counterbalancing end relevant (see ahead).","code":"glimpse(pati) #> Rows: 768 #> Columns: 6 #> $ subject  <fct> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… #> $ block    <dbl> 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3… #> $ lever    <fct> L, L, L, L, L, L, R, R, R, R, R, R, L, L, L, L, L, L, R, R, R… #> $ us       <chr> \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"S\", \"S\", \"S\", \"S\", \"S\", \"S\", \"… #> $ response <fct> lp, lp, lp, lp, lp, lp, lp, lp, lp, lp, lp, lp, np, np, np, n… #> $ rpert    <dbl> 0.9000, 1.5500, 3.3500, 4.1500, 4.6500, 4.3250, 0.4000, 0.162… pati  %>% ggplot(aes(x = block, y = rpert, colour = us)) +   geom_line(aes(group = interaction(us, subject)), alpha = .3) +   stat_summary(geom = 'line', fun = 'mean', size = 1) +   labs(x = \"Block\", y = \"Responses per trial\", colour = \"US\") +   facet_grid(~response)"},{"path":"http://victornavarro.org/heidi/articles/fitting_heidi.html","id":"writing-the-model-function","dir":"Articles","previous_headings":"Fitting the model to empirical data","what":"Writing the model function","title":"fitting_heidi","text":"biggest hurdle fitting model empirical data write function , given vector parameters model arguments, generates responses organized empirical data. Let’s begin summarizing group data first, know aim . now prepare arguments model function (pass run_heidi). achieve , use make_heidi_args, function turn necessitates three bits: 1) design data.frame, 2) table parameters, 3) list simulation options. Note arguments fixed optimization process, means training routine simulation run every time. minor issue, model sensitive order effects. Hence, important arguments prepare reflect overall behavior model. , simply address issue running several iterations model (different training routines) average models evaluating likelihood parameters. experiment presented Patittuci et al. (2016) fairly simple, can reduced two levers followed different appetitive outcome. , assume two outcomes independent . also take liberties number trials specify order reduce computing time. Note specified two counterbalancings groups. important reproduce counterbalancings data trying fit close possible. Otherwise, optimization process latch onto experimentally-irrelevant variables. example, can seen pati lever pressing whenever lever paired pellets. didn’t counterbalance identities levers USs, model might think one levers less salient . can now begin write model function. First, good idea see run_heidi returns run arguments . Although run_heidi function returns list 4 tibbles, care one : rs (model responses). Let’s take quick glance (glimpse) . case, hand, can write model function. Let’s dissect function three parts. First, manipulation vector parameters: name according stimulus names identified arguments (names(model_args$stim_alphas[[1]])). function use simulate (.e., one called run_heidi) requires named vector work, optimizers (looking optim) strip names numerical vectors trying optimize. next run model immediately select relevant information (rs). Finally, summarise model responses, taking care different counterbalancings process. Within step, also filter output nodes related expecting one USs (latest public version model lagging behind latest theoretical developments), classify responses nosepokes (produced US) lever presses (produced levers), calculate mean across blocks trials. Let’s see function action. just refresher, ’s summarised empirical data. notice anything odd ordering? empirical data sorted different way, said order empirical data model responses must match. emphasize point enough: nothing within fit function checks reorders data . sole responsible making sure pieces data order. , simply rewrite model function matches ordering empirical data. Notice different order group_by line . Much better! now ready begin fitting model.","code":"pati_summ <- pati %>%    group_by(block, us, response) %>%   summarise(rpert = mean(rpert), .groups = \"drop\") head(pati_summ) #> # A tibble: 6 × 4 #>   block us    response rpert #>   <dbl> <chr> <fct>    <dbl> #> 1     1 P     lp       0.820 #> 2     1 P     np       3.41  #> 3     1 S     lp       0.561 #> 4     1 S     np       3.28  #> 5     2 P     lp       1.57  #> 6     2 P     np       3.51 #The design data.frame des_df <- data.frame(group = c(\"CB1\", \"CB2\"),                      training = c(\"12L>(Pellet)/12R>(Sucrose)\", \"12L>(Sucrose)/12R>(Pellet)\"),                      rand_train = T) #The parameters pars <- get_params(des_df) #the actual parameter values don't matter, as our function will re-write them inside the optimizer call #The options opts <- get_heidi_opts(iterations = 10) #The arguments my_mod_args <- make_heidi_args(design = parse_design(des_df), pars = pars, opts = opts) mod_res <- run_heidi(args = my_mod_args) str(mod_res) #> List of 4 #>  $ vs  : tibble [1,152 × 8] (S3: tbl_df/tbl/data.frame) #>   ..$ group     : Factor w/ 2 levels \"CB1\",\"CB2\": 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ trial     : int [1:1152] 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ trial_type: Factor w/ 4 levels \"L>(Pellet)\",\"L>(Sucrose)\",..: 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ phase     : Factor w/ 1 level \"training\": 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ s1        : Factor w/ 4 levels \"L\",\"Pellet\",\"R\",..: 1 1 1 2 2 2 3 3 3 4 ... #>   ..$ s2        : Factor w/ 4 levels \"L\",\"Pellet\",\"R\",..: 2 3 4 1 3 4 1 2 4 1 ... #>   ..$ block_size: num [1:1152] 2 2 2 2 2 2 2 2 2 2 ... #>   ..$ value     : num [1:1152] 0.04 0 0 0.04 0 0 0 0 0 0 ... #>  $ acts: tibble [768 × 9] (S3: tbl_df/tbl/data.frame) #>   ..$ group     : Factor w/ 2 levels \"CB1\",\"CB2\": 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ trial     : int [1:768] 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ phase     : Factor w/ 1 level \"training\": 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ trial_type: Factor w/ 4 levels \"L>(Pellet)\",\"L>(Sucrose)\",..: 1 1 1 1 1 1 1 1 4 4 ... #>   ..$ act_type  : Factor w/ 2 levels \"chain\",\"comb\": 1 1 1 1 2 2 2 2 1 1 ... #>   ..$ s1        : Factor w/ 2 levels \"L\",\"R\": 1 1 1 1 1 1 1 1 2 2 ... #>   ..$ s2        : Factor w/ 4 levels \"L\",\"Pellet\",\"R\",..: 1 2 3 4 1 2 3 4 1 2 ... #>   ..$ block_size: num [1:768] 2 2 2 2 2 2 2 2 2 2 ... #>   ..$ value     : num [1:768] 0 0 0 0 0 0 0 0 0 0 ... #>  $ rs  : tibble [1,536 × 8] (S3: tbl_df/tbl/data.frame) #>   ..$ group     : Factor w/ 2 levels \"CB1\",\"CB2\": 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ trial     : int [1:1536] 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ phase     : Factor w/ 1 level \"training\": 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ trial_type: Factor w/ 4 levels \"L>(Pellet)\",\"L>(Sucrose)\",..: 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ s1        : Factor w/ 4 levels \"L\",\"Pellet\",\"R\",..: 1 1 1 1 2 2 2 2 3 3 ... #>   ..$ s2        : Factor w/ 4 levels \"L\",\"Pellet\",\"R\",..: 1 2 3 4 1 2 3 4 1 2 ... #>   ..$ block_size: num [1:1536] 2 2 2 2 2 2 2 2 2 2 ... #>   ..$ value     : num [1:1536] 0 0 0 0 0 0 0 0 0 0 ... #>  $ as  : tibble [384 × 7] (S3: tbl_df/tbl/data.frame) #>   ..$ group     : Factor w/ 2 levels \"CB1\",\"CB2\": 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ trial     : int [1:384] 1 1 1 1 1 1 1 1 2 2 ... #>   ..$ phase     : Factor w/ 1 level \"training\": 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ trial_type: Factor w/ 4 levels \"L>(Pellet)\",\"L>(Sucrose)\",..: 1 1 1 1 4 4 4 4 1 1 ... #>   ..$ s1        : Factor w/ 4 levels \"L\",\"Pellet\",\"R\",..: 1 2 3 4 1 2 3 4 1 2 ... #>   ..$ block_size: num [1:384] 2 2 2 2 2 2 2 2 2 2 ... #>   ..$ value     : num [1:384] 0.2 0 0 0 0 0 0.2 0 0.2 0 ... glimpse(mod_res$rs) #> Rows: 1,536 #> Columns: 8 #> $ group      <fct> CB1, CB1, CB1, CB1, CB1, CB1, CB1, CB1, CB1, CB1, CB1, CB1,… #> $ trial      <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ phase      <fct> training, training, training, training, training, training,… #> $ trial_type <fct> L>(Pellet), L>(Pellet), L>(Pellet), L>(Pellet), L>(Pellet),… #> $ s1         <fct> L, L, L, L, Pellet, Pellet, Pellet, Pellet, R, R, R, R, Suc… #> $ s2         <fct> L, Pellet, R, Sucrose, L, Pellet, R, Sucrose, L, Pellet, R,… #> $ block_size <dbl> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,… #> $ value      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… my_model_function <- function(pars, model_args){   #manipulating pars   names(pars) = names(model_args$stim_alphas[[1]])   model_args$stim_alphas = list(pars)   #running the model and selecting rs   mod_res = run_heidi(args = model_args)$rs   #summarizing the model   mod_res = mod_res %>%     filter(s2 %in% c(\"Pellet\", \"Sucrose\")) %>%     mutate(response = ifelse(s1 %in% c(\"Pellet\", \"Sucrose\"), \"np\", \"lp\"),            block = ceiling(trial/4)) %>%     rowwise() %>%     #note this filter below; we do not allow lever presses if the lever was not presented on the trial     filter(response == \"np\" | (response == \"lp\" & grepl(s1, trial_type))) %>%     mutate(us = ifelse(grepl(\"Pellet\", trial_type), \"P\", \"S\")) %>%     group_by(us, block, response) %>%     summarise(value = mean(value), .groups = \"drop\")   mod_res } my_model_function(c(.1, .2, .4, .3), model_args = my_mod_args) #> # A tibble: 24 × 4 #>    us    block response   value #>    <chr> <dbl> <chr>      <dbl> #>  1 P         1 lp       0.0114  #>  2 P         1 np       0.00229 #>  3 P         2 lp       0.0388  #>  4 P         2 np       0.0172  #>  5 P         3 lp       0.0492  #>  6 P         3 np       0.0332  #>  7 P         4 lp       0.0542  #>  8 P         4 np       0.0456  #>  9 P         5 lp       0.0570  #> 10 P         5 np       0.0548  #> # … with 14 more rows pati_summ #> # A tibble: 24 × 4 #>    block us    response rpert #>    <dbl> <chr> <fct>    <dbl> #>  1     1 P     lp       0.820 #>  2     1 P     np       3.41  #>  3     1 S     lp       0.561 #>  4     1 S     np       3.28  #>  5     2 P     lp       1.57  #>  6     2 P     np       3.51  #>  7     2 S     lp       0.641 #>  8     2 S     np       3.07  #>  9     3 P     lp       2.29  #> 10     3 P     np       3.07  #> # … with 14 more rows my_model_function <- function(pars, model_args){   #manipulating pars   names(pars) = names(model_args$stim_alphas[[1]])   model_args$stim_alphas = list(pars)   #running the model and selecting rs   mod_res = run_heidi(args = model_args)$rs   #summarizing the model   mod_res = mod_res %>%     filter(s2 %in% c(\"Pellet\", \"Sucrose\")) %>%     mutate(response = ifelse(s1 %in% c(\"Pellet\", \"Sucrose\"), \"np\", \"lp\"),            block = ceiling(trial/4)) %>%     rowwise() %>%     #note this filter below; we do not allow lever presses if the lever was not presented on the trial     filter(response == \"np\" | (response == \"lp\" & grepl(s1, trial_type))) %>%     mutate(us = ifelse(grepl(\"Pellet\", trial_type), \"P\", \"S\")) %>%     group_by(block, us, response) %>%     summarise(value = mean(value), .groups = \"drop\")   mod_res }  glimpse(my_model_function(c(.1, .2, .4, .3), model_args = my_mod_args)) #> Rows: 24 #> Columns: 4 #> $ block    <dbl> 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6… #> $ us       <chr> \"P\", \"P\", \"S\", \"S\", \"P\", \"P\", \"S\", \"S\", \"P\", \"P\", \"S\", \"S\", \"… #> $ response <chr> \"lp\", \"np\", \"lp\", \"np\", \"lp\", \"np\", \"lp\", \"np\", \"lp\", \"np\", \"… #> $ value    <dbl> 0.011428571, 0.002285714, 0.009086538, 0.001362981, 0.0388438… glimpse(pati_summ) #> Rows: 24 #> Columns: 4 #> $ block    <dbl> 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6… #> $ us       <chr> \"P\", \"P\", \"S\", \"S\", \"P\", \"P\", \"S\", \"S\", \"P\", \"P\", \"S\", \"S\", \"… #> $ response <fct> lp, np, lp, np, lp, np, lp, np, lp, np, lp, np, lp, np, lp, n… #> $ rpert    <dbl> 0.8195313, 3.4109375, 0.5609375, 3.2796875, 1.5738281, 3.5070…"},{"path":"http://victornavarro.org/heidi/articles/fitting_heidi.html","id":"fitting-the-model","dir":"Articles","previous_headings":"Fitting the model to empirical data","what":"Fitting the model","title":"fitting_heidi","text":"fit models heidi using fit_heidi function. function least requires 4 arguments: 1) (empirical) data, 2) model function, 3) arguments run model function, optimizer options. done great job taking care first three, let’s tackle last. get_optimizer_opts returns many things: stim_names: name stimuli find salience parameters. lower upper: lower upper bounds parameters can take. Consider shrinking speed process. optimizer: numerical optimization technique wish use MLE estimation. sample_pars: function samples parameters set distributions. family: family distribution/link function assume model. practice, request used determine link function transform model responses, likelihood function used objective function. linear family estimate extra parameter, scale, scales model responses (roughly) scale empirical data. family_pars: family-specific parameter estimated alongside salience parameters. verbose: Whether print parameters objective function values optimize. optim_options: optimizer-specific options used optimization call. free modify ; just make sure structure list returned get_optimizer_opts remains . , overwrite trace argument passed optimizer. , can fit model! fit_heidi function returns lot information track put got . Regarding latter, can see MLE parameters obtained time, negative log likelihood, given data: ’s good , well model run parameters “visually” fit data? can obtain predictions model via fit_predict function.  looks pretty good! Save blatant misfits, course. Now know everything need fit heidi empirical data. Go forth!","code":"my_optimizer_opts <- get_optimizer_opts(optimizer = \"optim\",                                         stim_names = pars$Stimulus,                                         family = \"linear\") my_optimizer_opts #> $stim_names #> [1] \"L\"       \"R\"       \"Pellet\"  \"Sucrose\" #>  #> $lower #> [1] 1e-06 1e-06 1e-06 1e-06 1e-06 #>  #> $upper #> [1]   0.999999   0.999999   0.999999   0.999999 100.000000 #>  #> $optimizer #> [1] \"optim\" #>  #> $sample_pars #> function ()  #> c(stats::rbeta(npars, 10, 20), stats::rgamma(1, 2)) #> <bytecode: 0x563279fad408> #> <environment: 0x563279fb05f8> #>  #> $family #> [1] \"linear\" #>  #> $family_pars #> [1] \"scale\" #>  #> $verbose #> [1] FALSE #>  #> $optim_options #> $optim_options$method #> [1] \"L-BFGS-B\" #>  #> $optim_options$control #> $optim_options$control$trace #> [1] 3 my_optimizer_opts$optim_options$control$trace = 0 the_fit <- fit_heidi(pati_summ$rpert,                      model_function = my_model_function, model_args = my_mod_args,                      optimizer_options = my_optimizer_opts) the_fit[c(\"best_pars\", \"nloglik\")] #> $best_pars #>          L          R     Pellet    Sucrose      scale  #>  0.2505208  0.2505176  0.9999990  0.9999990 17.0694079  #>  #> $nloglik #> [1] 38.15569 prediction = fit_predict(the_fit) %>%   group_by(block, us, response) %>%   summarise(value = mean(value), .groups = \"drop\") prediction$data = the_fit$data prediction %>% rename(\"prediction\" = \"value\") %>%     pivot_longer(cols = c(\"prediction\", \"data\"),                         names_to = \"type\",                         values_to = \"value\") %>%     ggplot(ggplot2::aes(x = block, y = value, colour = us, linetype = type)) +     geom_line() +     theme_bw() +      facet_grid(us~response)"},{"path":"http://victornavarro.org/heidi/articles/fitting_heidi.html","id":"a-final-note","dir":"Articles","previous_headings":"Fitting the model to empirical data > Fitting the model","what":"A final note","title":"fitting_heidi","text":"vignette pre-generated, don’t want user fit model time installation. try keep package develops, spot inconsistencies, please drop line.","code":""},{"path":[]},{"path":"http://victornavarro.org/heidi/articles/heidi_basics.html","id":"ingredients","dir":"Articles","previous_headings":"Using heidi in R","what":"Ingredients","title":"heidi_basics","text":"successfully simulate need data.frame specifying groups, phases, trials experiment, (optionally) data.frame salience parameters stimuli experiment.","code":""},{"path":"http://victornavarro.org/heidi/articles/heidi_basics.html","id":"the-design-data-frame","dir":"Articles","previous_headings":"Using heidi in R","what":"The design data.frame","title":"heidi_basics","text":"-called design data.frame user specifies experimental design. rules data.frame: row represents group. first column contains group labels. remaining columns organized pairs. first column pair specifies trials give phase, whereas second column pair specifies whether trials within phase randomized. Let’s build design matrix blocking experiment. observations trial notation: 0. Trials preceded number. number represents number times trial given phase. “10A(US)” means “(US)” trial given 10 times. 1. presence absence unconditioned stimulus denoted traditional “+” “-” symbols. Instead, use parenthesis denote “complex” stimuli. can thought element complex name (.e., one character). , “(US)” specifies single element represent US. 2. “/” character used trial separator (imply randomization ). Thus, “1A/1B” specifies single “” trial single “B” trial given phase. Recall randomization trials within phase specified column (, R1, R2, R3). ever want check trials string work simulator, can use heidi::trial_parser. function returns list lot information. Check ??trial_parser information. Let’s go.","code":"my_blocking <- data.frame(Group = c(\"Exp\", \"Control\"),                           Phase1 = c(\"10A(US)\", \"10C(US)\"),                           R1 = c(FALSE, FALSE),                           Phase2 = c(\"10AB(US)\", \"10AB(US)\"),                           R2 = c(FALSE, FALSE),                           Test = c(\"1A/1B\", \"1A/1B\"),                           R3 = c(FALSE, FALSE)) my_blocking #>     Group  Phase1    R1   Phase2    R2  Test    R3 #> 1     Exp 10A(US) FALSE 10AB(US) FALSE 1A/1B FALSE #> 2 Control 10C(US) FALSE 10AB(US) FALSE 1A/1B FALSE trial <- trial_parser(\"AB/10AC\")  #not specifying a number of AB trials. Bad practice! trial[c(\"trial_names\", \"trial_repeats\")] #> $trial_names #> [1] \"AB\" \"AC\" #>  #> $trial_repeats #> [1]  1 10 trial <- trial_parser(\"10AB(AB)(US)\") #considering a configural cue for elements AB trial[c(\"unique_nominal_stimuli\")] #> $unique_nominal_stimuli #> [1] \"A\"  \"B\"  \"AB\" \"US\""},{"path":"http://victornavarro.org/heidi/articles/heidi_basics.html","id":"the-parameters-data-frame","dir":"Articles","previous_headings":"Using heidi in R","what":"The parameters data.frame","title":"heidi_basics","text":"can run simulation design data.frame (simulation function use default salience values stimuli). However, want specific salience values stimuli experiment, pass data.frame parameters. Let’s specify experiment.","code":"my_pars <- get_params(my_blocking, default_par = .2) #Note we can quickly get a table with parameters directly from the design data.frame; a good way to check we are going in the right direction my_pars$Alpha[my_pars$Stimulus == \"US\"] <- .4 my_pars #>   Stimulus Alpha #> 1        A   0.2 #> 2       US   0.4 #> 3        B   0.2 #> 4        C   0.2"},{"path":"http://victornavarro.org/heidi/articles/heidi_basics.html","id":"additional-options","dir":"Articles","previous_headings":"Using heidi in R > The parameters data.frame","what":"Additional options","title":"heidi_basics","text":"final ingredient list simulation options. can get default one get_heidi_opts, modify accordingly.","code":"my_opts <- get_heidi_opts() my_opts$iterations <- 10 my_opts #> $iterations #> [1] 10 #>  #> $miniblocks #> [1] TRUE"},{"path":"http://victornavarro.org/heidi/articles/heidi_basics.html","id":"simulating","dir":"Articles","previous_headings":"Using heidi in R > The parameters data.frame","what":"Simulating","title":"heidi_basics","text":"can finally simulate model quick_heidi. default, function returns list aggregated data. Let’s see.","code":"my_sim <- quick_heidi(design_df = my_blocking,                     param_df = my_pars,                     options = my_opts) names(my_sim) #contains information about weights (vs), activation values (acts), r-values (rs), and alphas (as) #> [1] \"vs\"   \"acts\" \"rs\"   \"as\" head(my_sim$vs) #> # A tibble: 6 × 8 #>   group   trial trial_type phase  s1    s2    block_size value #>   <fct>   <int> <fct>      <fct>  <fct> <fct>      <dbl> <dbl> #> 1 Control     1 C(US)      Phase1 A     B              1     0 #> 2 Control     1 C(US)      Phase1 A     C              1     0 #> 3 Control     1 C(US)      Phase1 A     US             1     0 #> 4 Control     1 C(US)      Phase1 B     A              1     0 #> 5 Control     1 C(US)      Phase1 B     C              1     0 #> 6 Control     1 C(US)      Phase1 B     US             1     0"},{"path":"http://victornavarro.org/heidi/articles/heidi_basics.html","id":"plotting","dir":"Articles","previous_headings":"Using heidi in R","what":"Plotting","title":"heidi_basics","text":", rarely want raw data. like , want see plots. Let’s use make_plots create plots, patch_plots display . , paired side side:","code":"my_plots = make_plots(my_sim) plot_names = names(my_plots) plot_names #>  [1] \"Control: Rs (simple)\"     \"Control: Rs (complex)\"    #>  [3] \"Control: Acts (bar)\"      \"Control: Acts (learning)\" #>  [5] \"Control: Vs\"              \"Control: As\"              #>  [7] \"Exp: Rs (simple)\"         \"Exp: Rs (complex)\"        #>  [9] \"Exp: Acts (bar)\"          \"Exp: Acts (learning)\"     #> [11] \"Exp: Vs\"                  \"Exp: As\""},{"path":"http://victornavarro.org/heidi/articles/heidi_basics.html","id":"stimulus-specific-responding-simple","dir":"Articles","previous_headings":"Using heidi in R > Plotting","what":"Stimulus-specific responding (simple)","title":"heidi_basics","text":"","code":"patch_plots(plots = my_plots, selection = plot_names[c(1, 7)]) #Responding"},{"path":"http://victornavarro.org/heidi/articles/heidi_basics.html","id":"stimulus-specific-responding-complex","dir":"Articles","previous_headings":"Using heidi in R > Plotting","what":"Stimulus-specific responding (complex)","title":"heidi_basics","text":"","code":"patch_plots(plots = my_plots, selection = plot_names[c(2, 8)]) #Responding"},{"path":"http://victornavarro.org/heidi/articles/heidi_basics.html","id":"stimulus-activations-bar","dir":"Articles","previous_headings":"Using heidi in R > Plotting","what":"Stimulus activations (bar)","title":"heidi_basics","text":"","code":"patch_plots(plots = my_plots, selection = plot_names[c(3, 9)])"},{"path":"http://victornavarro.org/heidi/articles/heidi_basics.html","id":"stimulus-activations-bar-1","dir":"Articles","previous_headings":"Using heidi in R > Plotting","what":"Stimulus activations (bar)","title":"heidi_basics","text":"","code":"patch_plots(plots = my_plots, selection = plot_names[c(4, 10)])"},{"path":"http://victornavarro.org/heidi/articles/heidi_basics.html","id":"stimulus-associations","dir":"Articles","previous_headings":"Using heidi in R > Plotting","what":"Stimulus associations","title":"heidi_basics","text":"","code":"patch_plots(plots = my_plots, selection = plot_names[c(5, 11)])"},{"path":"http://victornavarro.org/heidi/articles/heidi_basics.html","id":"stimulus-salience-at-expression","dir":"Articles","previous_headings":"Using heidi in R > Plotting","what":"Stimulus salience at expression","title":"heidi_basics","text":"","code":"patch_plots(plots = my_plots, selection = plot_names[c(6, 12)])"},{"path":"http://victornavarro.org/heidi/articles/heidi_basics.html","id":"graphing","dir":"Articles","previous_headings":"Using heidi in R","what":"Graphing","title":"heidi_basics","text":"can also take look state model’s associations point training, using function make_graphs.","code":"my_graph_opts <- get_graph_opts(\"small\") make_graphs(my_sim, trial = 10, opts = my_graph_opts) #> $`Group Control: (Trial 10)` #>  #> $`Group Exp: (Trial 10)` make_graphs(my_sim, trial = 20, opts = my_graph_opts) #> $`Group Control: (Trial 20)` #>  #> $`Group Exp: (Trial 20)`"},{"path":"http://victornavarro.org/heidi/articles/heidi_basics.html","id":"final-thoughts","dir":"Articles","previous_headings":"Using heidi in R","what":"Final thoughts","title":"heidi_basics","text":"heidi package designed simulate quickly; write design get glance model predictions. However, package also features advanced users, make sure check advanced vignettes ready.","code":""},{"path":"http://victornavarro.org/heidi/articles/heidi_math.html","id":"the-mathematics-behind-heidi","dir":"Articles","previous_headings":"","what":"The mathematics behind HeiDI","title":"heidi_math","text":"HeiDI model four major components: 1) acquisition reciprocal associations stimuli, 2) pooling associations activate stimulus representations, 3) distribution activations stimulus-specific response units, 4) generation responses.","code":""},{"path":"http://victornavarro.org/heidi/articles/heidi_math.html","id":"acquiring-reciprocal-associations","dir":"Articles","previous_headings":"The mathematics behind HeiDI","what":"1 - Acquiring reciprocal associations","title":"heidi_math","text":"Whenever trial given, HeiDI learns associations among stimuli. association two stimuli, \\(\\) \\(j\\) denoted via \\(v_{,j}\\). association \\(v_{,j}\\) represents directional expectation: expectation \\(j\\) presented \\(\\). Furthermore, value represents nature effect \\(\\) representation \\(j\\). positive, presentation \\(\\) “excites” representation \\(j\\). negative, presentation \\(\\) “inhibits” representation \\(j\\). HeiDI learns “forward” associations stimuli, also reciprocal, “backward” associations. Thus, organisms presented \\(\\rightarrow j\\), organisms learn \\(v_{,j}\\), also \\(v_{j, }\\), expectation receiving \\(\\) presented \\(j\\). Note , sake brevity, learning equations specified forward associations.","code":""},{"path":"http://victornavarro.org/heidi/articles/heidi_math.html","id":"the-stimulus-expectation-rule","dir":"Articles","previous_headings":"The mathematics behind HeiDI > 1 - Acquiring reciprocal associations","what":"1.1 - The stimulus expectation rule","title":"heidi_math","text":"HeiDI generates expectations stimuli. expectation stimulus \\(j\\) (\\(e_j\\)) expressed \\[ \\tag{Eq. 1} e_j  = \\sum_{k}^{K}x_kv_{k,j} \\] \\(K\\) set containing stimuli experiment, \\(x_k\\) quantity denoting presence absence stimulus \\(k\\) (1 0, respectively)1.","code":""},{"path":"http://victornavarro.org/heidi/articles/heidi_math.html","id":"learning-rule","dir":"Articles","previous_headings":"The mathematics behind HeiDI > 1 - Acquiring reciprocal associations","what":"1.2 - Learning rule","title":"heidi_math","text":"HeiDI learns appropriate expectations via error-correction mechanisms. trial \\(t\\), association stimuli \\(\\) \\(j\\) expressed \\[ \\tag{Eq. 2} v_{,j, t} = v_{,j, t-1} + \\Delta v_{,j, t} \\] \\(v_{j,, t-1}\\) forward association \\(\\) \\(j\\) trial \\(t-1\\), \\(\\Delta v_{,j, t}\\) change association result trial \\(t\\). delta term uses pooled error term expressed \\[ \\tag{Eq. 3} \\Delta v_{,j} = x_i\\alpha_i(x_jc\\alpha_j - e_j) \\] \\(\\alpha_i\\) \\(\\alpha_j\\) parameters representing salience stimuli \\(\\) \\(j\\), respectively (\\(0 \\le \\alpha \\le 1\\)), \\(c\\) scaling constant (\\(c = 1\\)). Note term denoting trial, \\(t\\) omitted simplicity.","code":""},{"path":"http://victornavarro.org/heidi/articles/heidi_math.html","id":"pooling-the-strength-of-associations","dir":"Articles","previous_headings":"The mathematics behind HeiDI","what":"2 - Pooling the strength of associations","title":"heidi_math","text":"HeiDI pools stimulus associations activate stimulus-specific representations. activation representation stimulus \\(j\\), \\(a_j\\), defined : \\[ \\tag{Eq. 4} a_{j,M} = o_{j,M} + h_{j,M} \\] \\(o_{j,M}\\) denotes combined associative strength towards stimulus \\(j\\) presence stimuli \\(M\\), \\(h_{j,M}\\) denotes chained associative strength towards stimulus \\(j\\) presence stimuli \\(M\\).","code":""},{"path":"http://victornavarro.org/heidi/articles/heidi_math.html","id":"combined-associative-strength","dir":"Articles","previous_headings":"The mathematics behind HeiDI > 2 - Pooling the strength of associations","what":"2.1 - Combined associative strength","title":"heidi_math","text":"quantity \\(o_{j,M}\\) result combining associative strength forwards backwards associations stimulus \\(j\\) \\[ \\tag{Eq. 5} o_{j,M} = \\sum_{m \\neq j}^{M}v_{m,j} + \\left(\\frac{\\sum_{m \\neq j}^{M}v_{m,j} \\sum_{m \\neq j}^{M}v_{j,m}}{c}\\right) \\] sums run stimuli \\(M\\) presented trial, also different stimulus \\(j\\).2 left hand term describes forward associations stimuli \\(M\\) \\(j\\) affect representation \\(j\\), whereas right hand term describes backward associations \\(j\\) stimuli \\(M\\) affect representation (although modulated forward associations ).","code":""},{"path":"http://victornavarro.org/heidi/articles/heidi_math.html","id":"chained-associative-strength","dir":"Articles","previous_headings":"The mathematics behind HeiDI > 2 - Pooling the strength of associations","what":"2.2 - Chained associative strength","title":"heidi_math","text":"quantity \\(h_{j,M}\\) captures indirect associative strength stimuli \\(M\\) \\(j\\), via absent stimuli. , \\(h_{j,M}\\) defined \\[ \\tag{Eq. 6a} h_{j,M} = \\sum_{m \\neq j}^{M} \\sum_{n}^{N}\\frac{v_{m,n}o_{j,n}}{c} \\] N stimuli presented trial (.e., K-M). Note re-use \\(o\\), quantity defined Eq. 5. equation allows absent stimuli \\(N\\) influence representation stimulus \\(j\\), long association present stimuli \\(M\\). Honey Dwyer (2022), authors specify similarity-based mechanism modulates effect associative chains according similarity salience nominal retrieved stimuli. , Eq. 6a expanded : \\[ \\tag{Eq. 6b} h_{j,M} = \\sum_{m \\neq j}^{M} \\sum_{n}^{N}S(\\alpha_{n}, \\alpha'_n)\\frac{v_{m,n}o_{j,n}}{c} \\] \\(S\\) similarity function takes nominal salience stimulus n, \\(\\alpha_n\\) (perceived \\(n\\) actually presented trial) retrieved salience, \\(\\alpha'_n\\) (perceived \\(n\\) retrieved via stimuli M, see ahead). function defined : \\[ \\tag{Eq. 7} S(\\alpha_n, \\alpha'_n) = \\frac{\\alpha_n}{\\alpha_n + |\\alpha_n-\\alpha'_n|} \\times \\frac{\\alpha'_n}{\\alpha'_n+ |\\alpha_n-\\alpha'_n|} \\] Notably, whenever one nominal salience given stimulus, \\(\\alpha_n\\) arithmetic mean among nominal values (see “heidi_similarity” vignette).","code":""},{"path":"http://victornavarro.org/heidi/articles/heidi_math.html","id":"distributing-strength-into-stimulus-specific-response-units","dir":"Articles","previous_headings":"The mathematics behind HeiDI","what":"3 - Distributing strength into stimulus-specific response units","title":"heidi_math","text":"HeiDI distributes pooled stimulus-specific strength among \\(K\\) stimuli, according relative salience. activation response unit \\(j\\), \\(R_j\\) expressed \\[ \\tag{Eq. 8} R_j = \\frac{\\theta(j)}{\\sum_{k}^{K}\\theta(k)}a_{j,M} \\] \\(K\\) can include present absent stimuli, \\(\\theta\\) function depends whether stimulus \\(k\\) absent (.e., \\(k \\N\\)) (.e., \\(k \\M\\)), : \\[ \\tag{Eq. 9} \\theta(k) =  \\begin{cases}     \\left |\\sum_{m}^{M}\\left( v_{m,k}+\\sum_{n \\neq k}^{N}\\frac{v_{m,n}v_{n,k}}{c}\\right) \\right|,& \\text{} k \\N\\\\     \\alpha_k, & \\text{otherwise} \\end{cases} \\] Note quantity absent stimuli absolute, order prevent negative \\(\\theta\\) values due inhibitory associations3. Also note summation term used left-hand side expression absent stimulus. implies present stimuli \\(M\\) contribute salience stimulus \\(k\\). Finally, note right side expression present stimuli contribute via direct association \\(k\\), \\(v_{m,k}\\), also associative chains absent stimuli (c.f., Eq. 6a).","code":""},{"path":"http://victornavarro.org/heidi/articles/heidi_math.html","id":"generating-responses","dir":"Articles","previous_headings":"The mathematics behind HeiDI","what":"4 - Generating responses","title":"heidi_math","text":"Finally, HeiDI responds. response-generating mechanisms HeiDI currently underspecified. current version, HeiDI’s responses product activation stimulus-specific response units connection units specific motor units. , activation motor unit \\(q\\), \\(r_q\\), given \\[ \\tag{Eq. 10} r_q = R_jw_{j,q} \\] \\(w_{j,q}\\) weight representing association stimulus-specific unit \\(j\\) motor unit \\(q\\).","code":""},{"path":"http://victornavarro.org/heidi/articles/heidi_similarity.html","id":"simulating-similarity-effects","dir":"Articles","previous_headings":"","what":"Simulating similarity effects","title":"heidi_similarity","text":"Honey Dwyer (2022), authors propose similarity retrieved nominal saliencies stimulus representations modulates quantities combination rules. Retrieved saliencies exclusively absent stimuli, result existing associations stimuli (see Eq. 8 math vignette). contrast, nominal saliencies denote intensity stimulus representations stimuli actually presented trial (.e., one set experimenter, \\(\\alpha\\)). perhaps intuitive example effect saliency similarity responding refers effect weakly retrieved representations behavior. low similarity weakly retrieved representation nominal representation result reduced effect former behavior. example, typical Pavlovian inhibition paradigm [(US)/AX], inhibitor (e.g., X) strong effect behavior actually presented weak effect behavior weakly retrieved stimulus strong association (e.g., ). Yet, inspiration proposing general rule fairly specific. attempt explain introduction delay CS US stimuli higher-order conditioning experiments sometimes enhance responding stimulus never paired US (e.g., AX/X(US) X(US)/AX).","code":""},{"path":"http://victornavarro.org/heidi/articles/heidi_similarity.html","id":"reproducing-the-simulation-presented-in-the-paper","dir":"Articles","previous_headings":"Simulating similarity effects","what":"Reproducing the simulation presented in the paper","title":"heidi_similarity","text":"paper, authors plot similarity retrieved saliencies nominal saliencies stimulus X sensory preconditioning experiment short delay X US used (group Reduced) (group ). effect introducing delay simulated X saliency .36; otherwise, saliency .40. saliencies US fixed .30 .50, respectively, conditions.","code":"df <- data.frame(Group = c(\"Same\", \"Reduced\"),                  P1 = c(\"10A(X_a)\", \"10A(X_a)\"),                  R1 = c(FALSE, FALSE),                  P2 = c(\"10(X_a)(US)\", \"10(X_b)(US)\"),                  R2 = c(FALSE, FALSE)) params <- data.frame(Stimulus = c(\"A\", \"X_a\", \"X_b\", \"US\"),                      Alpha = c(.30, .40, .36, .50)) model <- quick_heidi(df, params)"},{"path":"http://victornavarro.org/heidi/articles/heidi_similarity.html","id":"plotting-the-similarity-between-saliencies","dir":"Articles","previous_headings":"Simulating similarity effects > Reproducing the simulation presented in the paper","what":"Plotting the similarity between saliencies","title":"heidi_similarity","text":"plot currently supported simulator, can easily generated passing \\(\\rightarrow X\\) association one alphas internal function used calculate similarity heidi:::.alphaSim.  Note simulator save state weights trial 1. ’s plot start similarity 0, shown paper.","code":"model$vs %>% filter(s1 == \"A\" & s2 == \"X\" & phase == \"P1\") %>% #using only the first phase   mutate(nominal_alpha = ifelse(group == 'Reduced', mean(.36, .40), .40)) %>%   mutate(similarity = heidi:::.alphaSim(value, nominal_alpha)) %>%   ggplot(aes(x = trial, y = similarity, linetype = group)) +    geom_line() + theme_bw() +    labs(x = \"Trial\", y = \"Similarity\", linetype = \"Group\")"},{"path":"http://victornavarro.org/heidi/articles/heidi_similarity.html","id":"plotting-the-distribution-of-responding","dir":"Articles","previous_headings":"Simulating similarity effects > Reproducing the simulation presented in the paper","what":"Plotting the distribution of responding","title":"heidi_similarity","text":"one little bit trickier, figure manuscript effectively contains many experiments varying number XA trials starting first-order conditioning phase. address , run multiple simulations different experimental designs. Run model. now can manually plot distribution responding among stimuli model$rs.","code":"ntrials <- 1:10 df <- data.frame(Group = c(paste0(\"S\", ntrials), paste0(\"R\", ntrials)),                  P1 = rep(paste0(ntrials, \"A(X_a)\"), 2),                  R1 = FALSE,                  P2 = rep(c(\"10(X_a)>(US)\", \"10(X_b)>(US)\"), each = 10),                  R2 = FALSE,                  P3 = \"A#\",                  R3 = FALSE) params <- data.frame(Stimulus = c(\"A\", \"X_a\", \"X_b\", \"US\"),                      Alpha = c(.30, .40, .36, .50)) head(df) #>   Group      P1    R1           P2    R2 P3    R3 #> 1    S1 1A(X_a) FALSE 10(X_a)>(US) FALSE A# FALSE #> 2    S2 2A(X_a) FALSE 10(X_a)>(US) FALSE A# FALSE #> 3    S3 3A(X_a) FALSE 10(X_a)>(US) FALSE A# FALSE #> 4    S4 4A(X_a) FALSE 10(X_a)>(US) FALSE A# FALSE #> 5    S5 5A(X_a) FALSE 10(X_a)>(US) FALSE A# FALSE #> 6    S6 6A(X_a) FALSE 10(X_a)>(US) FALSE A# FALSE model <- quick_heidi(df, params) model$rs %>%    filter(phase == 'P3' & s2 == \"US\") %>%   mutate(trial = trial-11,           group_lab = ifelse(substr(group, 1, 1) == \"R\", \"Reduced\", \"Same\")) %>%   ggplot(aes(x = trial, y = value, colour = s1, linetype = group_lab)) +    geom_line() +    theme_bw() +    labs(x = \"Trial\", y = \"R-value\", colour = \"Stimulus\", linetype = \"Group\") +    facet_wrap(~s2)"},{"path":"http://victornavarro.org/heidi/articles/heidi_similarity.html","id":"some-final-notes","dir":"Articles","previous_headings":"Simulating similarity effects > Reproducing the simulation presented in the paper","what":"Some final notes","title":"heidi_similarity","text":"paper, Honey Dwyer completely specify rules choosing reference value similarity calculation, whenever one nominal stimulus experienced. example, simulation use two nominal versions X stimulus (X_a X_b), , whenever model compute similarity retrieved (.e., \\(\\rightarrow X\\)) conditioned saliency values, encounter problem choose () among least two conditioned values (X_a X_b). Although authors paper chose saliency nominal X conditioned US (.e., X_b), specify choice made , less intuitive situations. way avoid solving issue (now), current implementation similarity rule uses average nominal stimuli reference value similarity calculation. specific simulation case, implementation actually reduces effect similarity distribution responding. full implementation idea can found heidi:::.chainVSim.","code":""},{"path":"http://victornavarro.org/heidi/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Victor Navarro. Author, maintainer.","code":""},{"path":"http://victornavarro.org/heidi/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Navarro V (2022). heidi: R-based HeiDI simulator. https://github.com/victor-navarro/heidi, http://victornavarro.org/heidi/.","code":"@Manual{,   title = {heidi: An R-based HeiDI simulator},   author = {Victor Navarro},   year = {2022},   note = {https://github.com/victor-navarro/heidi, http://victornavarro.org/heidi/}, }"},{"path":"http://victornavarro.org/heidi/index.html","id":"heidi","dir":"","previous_headings":"","what":"An R-based HeiDI simulator","title":"An R-based HeiDI simulator","text":"R-based package Simulate Acquisition Expression Reciprocal Associations","code":""},{"path":"http://victornavarro.org/heidi/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An R-based HeiDI simulator","text":"need devtools install package github. , run: install.packages(\"devtools\") Afterwards, can install directly repository via: devtools::install_github(\"victor-navarro/heidi\", build_vignettes = TRUE) managed build vignettes, ’s vignette showing basics package vignette(\"heidi_basics\", package = \"heidi\") just want quick simulating, launch visual interface via:","code":"library(heidi) heidi_app()"},{"path":"http://victornavarro.org/heidi/index.html","id":"try-the-online-shiny-app","dir":"","previous_headings":"","what":"Try the online Shiny app","title":"An R-based HeiDI simulator","text":"want check app without committing install, can check (wary: server might run free monthly quota). https://victor-navarro.shinyapps.io/heidi_app/","code":""},{"path":"http://victornavarro.org/heidi/reference/fit_heidi.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit HeiDI to data — fit_heidi","title":"Fit HeiDI to data — fit_heidi","text":"function obtain MLE estimates HeiDI, given data","code":""},{"path":"http://victornavarro.org/heidi/reference/fit_heidi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit HeiDI to data — fit_heidi","text":"","code":"fit_heidi(data, model_function, model_args, optimizer_options, ...)"},{"path":"http://victornavarro.org/heidi/reference/fit_heidi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit HeiDI to data — fit_heidi","text":"data numeric vector containing data fit HeiDI model_function function runs heidi, given vector stimulus saliencies, returns data.frame r-values, identical organization data. model_args arguments train model function. returned make_heidi_args. optimizer_options list options optimizer, returned get_optimizer_opts. ... Extra parameters passed optimizer call","code":""},{"path":"http://victornavarro.org/heidi/reference/fit_heidi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit HeiDI to data — fit_heidi","text":"list nloglik: negative log-likelihood model best_pars: MLE parameters model_pars: model-specific MLE parameters link_pars: link-specific MLE parameters data: data used fit model model_function: model function supplied user link_function: link function used process ll_function: log-likelihood function used process model_args: model function arguments supplied user optimizer_options: optimizer options supplied user extra_pars: extra parameters passed main function","code":""},{"path":"http://victornavarro.org/heidi/reference/fit_heidi.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Fit HeiDI to data — fit_heidi","text":"See fitting_heidi vignette examples","code":""},{"path":[]},{"path":"http://victornavarro.org/heidi/reference/fit_helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"An assortment of functions to help fit HeiDI — get_optimizer_opts","title":"An assortment of functions to help fit HeiDI — get_optimizer_opts","text":"assortment functions help fit HeiDI","code":""},{"path":"http://victornavarro.org/heidi/reference/fit_helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An assortment of functions to help fit HeiDI — get_optimizer_opts","text":"","code":"get_optimizer_opts(optimizer, stim_names, family, adj = 1e-06)  fit_predict(fit, new_args = NULL, type = \"response\")"},{"path":"http://victornavarro.org/heidi/reference/fit_helpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An assortment of functions to help fit HeiDI — get_optimizer_opts","text":"optimizer string specifying optimizer use. One c(\"optim\") stim_names string specifying name stimuli experiment family string specifying family function generate responses (calculate likelihood function ). Currently supports c(\"identity\", \"linear\", \"poisson\") adj adjustment factor upper lower bounds. Default 1e-6 fit fit, returned fit_heidi. new_args tibble arguments model, returned make_heidi_args. type type prediction. One c(\"response\"). response, link function used fit model applied model function return.","code":""},{"path":"http://victornavarro.org/heidi/reference/fit_helpers.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"An assortment of functions to help fit HeiDI — get_optimizer_opts","text":"Whenever family function identity used, family-specific parameters always appended end relevant list entries.","code":""},{"path":"http://victornavarro.org/heidi/reference/get_heidi_opts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get options for heidi model — get_heidi_opts","title":"Get options for heidi model — get_heidi_opts","text":"Get options heidi model","code":""},{"path":"http://victornavarro.org/heidi/reference/get_heidi_opts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get options for heidi model — get_heidi_opts","text":"","code":"get_heidi_opts(iterations = 1, miniblocks = TRUE)"},{"path":"http://victornavarro.org/heidi/reference/get_heidi_opts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get options for heidi model — get_heidi_opts","text":"iterations integer denoting number iterations run. Default = 1. miniblocks logical denoting whether create trial miniblocks possible. Default = TRUE.","code":""},{"path":"http://victornavarro.org/heidi/reference/get_heidi_opts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get options for heidi model — get_heidi_opts","text":"","code":"get_heidi_opts(iterations = 10) #> $iterations #> [1] 10 #>  #> $miniblocks #> [1] TRUE #>"},{"path":"http://victornavarro.org/heidi/reference/heidi_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the heidi GUI — heidi_app","title":"Run the heidi GUI — heidi_app","text":"Starts shiny application","code":""},{"path":"http://victornavarro.org/heidi/reference/heidi_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the heidi GUI — heidi_app","text":"","code":"heidi_app(browser = getOption(\"shiny.launch.browser\", interactive()))"},{"path":"http://victornavarro.org/heidi/reference/heidi_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the heidi GUI — heidi_app","text":"browser TRUE, app launched browser.","code":""},{"path":"http://victornavarro.org/heidi/reference/heidi_helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"An assortment of functions to help heidi — heidi_helpers","title":"An assortment of functions to help heidi — heidi_helpers","text":"get_params generates data.frame stimulus salience parameters. gen_ss_weights generates named array model weights. parse_vs, parse_acts, parse_rs parse_heidi_results parse raw outputs train_pav_heidi readable format. filter_heidi_results convenience function filter specific phase trial_type data.","code":""},{"path":"http://victornavarro.org/heidi/reference/heidi_helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An assortment of functions to help heidi — heidi_helpers","text":"","code":"get_params(design, default_par = 0.2)  gen_ss_weights(stims, default_val = 0)  parse_vs(mod)  parse_acts(mod)  parse_rs(mod)  parse_as(mod)  parse_heidi_results(raw_results)  filter_heidi_results(parsed_results, filters)"},{"path":"http://victornavarro.org/heidi/reference/heidi_helpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An assortment of functions to help heidi — heidi_helpers","text":"design experimental design. Either data.frame tibble returned parse_design default_par float 0 1 stims character vector stimuli default_val Default alpha value mod model list, returned train_pav_heidi raw_results tibble model information, returned quick_heidi parsed_results list parsed results, returned parse_heidi_results filters named list containing \"phase\" \"trial_type\" character vectors, filtering data","code":""},{"path":"http://victornavarro.org/heidi/reference/heidi_plots.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting functions for heidi models — heidi_plots","title":"Plotting functions for heidi models — heidi_plots","text":"Plotting functions heidi models","code":""},{"path":"http://victornavarro.org/heidi/reference/heidi_plots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting functions for heidi models — heidi_plots","text":"","code":"make_plots(dat)  plot_vs(vals)  plot_acts(vals, bars = F)  plot_rs(vals, simple = F)  plot_as(vals)  get_plot_opts(common_scale = TRUE)  plot_common_scale(plots)  graph_weights(   vs,   limits = max(abs(range(vs$value))) * c(-1, 1),   t = max(vs$trial),   opts = get_graph_opts() )  get_graph_opts(graph_size = \"small\")  make_graphs(   mod,   limits = max(abs(range(mod$vs$value))) * c(-1, 1),   trial = max(mod$vs$trial),   opts = get_graph_opts() )  patch_graphs(graphs, selection = names(graphs))  patch_plots(plots, selection, options = get_plot_opts())"},{"path":"http://victornavarro.org/heidi/reference/heidi_plots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting functions for heidi models — heidi_plots","text":"dat list containing data.frames parsed weights, r values, activation values, returned parse_heidi_results. vals data.frame containing parsed values bars logical stipulating whether summarize use stacked bars, instead points lines. simple logical stipulating whether simplify plot collapsing across sources. common_scale logical. Whether plot data common y-scale. plots named list plots vs data.frame containing parsed weights, returned parse_heidi_results limits vector length 2 specifying range weights. Defaults negative positive maximum absolute weights. t integer specifying trial opts list options graphing weights. See ?get_graph_opts. graph_size string specifying desired graph size, c(\"large\", \"small\"). Default \"large\" mod Parsed model results, returned parse_heidi_results. trial integer denoting trial weights graphed. Defaults last trial data. graphs list graphs, returned make_graphs selection character vector selected plots options list options","code":""},{"path":"http://victornavarro.org/heidi/reference/heidi_plots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting functions for heidi models — heidi_plots","text":"list ggplot objects","code":""},{"path":"http://victornavarro.org/heidi/reference/heidi_plots.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plotting functions for heidi models — heidi_plots","text":"Plotting options obtained via get_plot_opts(). now, plotting common y-axis supported.","code":""},{"path":[]},{"path":"http://victornavarro.org/heidi/reference/make_heidi_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a tibble to fit a heidi model — make_heidi_args","title":"Make a tibble to fit a heidi model — make_heidi_args","text":"Make tibble fit heidi model","code":""},{"path":"http://victornavarro.org/heidi/reference/make_heidi_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a tibble to fit a heidi model — make_heidi_args","text":"","code":"make_heidi_args(design, pars, opts)"},{"path":"http://victornavarro.org/heidi/reference/make_heidi_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a tibble to fit a heidi model — make_heidi_args","text":"design design list, returned parse_design pars parameter data.frame returned get_params opts list options","code":""},{"path":"http://victornavarro.org/heidi/reference/make_heidi_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a tibble to fit a heidi model — make_heidi_args","text":"tibble arguments required run model. row represents group experimental design.","code":""},{"path":[]},{"path":"http://victornavarro.org/heidi/reference/make_heidi_args.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a tibble to fit a heidi model — make_heidi_args","text":"","code":"df <- data.frame(Group = c('Group 1', 'Group 2'), P1 = c('10AB(US)', '10A(US)'), R1 = c(TRUE, TRUE)) des <- parse_design(df) ps <- get_params(des, 0.2) make_heidi_args(design = des, pars = ps, opts = get_heidi_opts(iterations = 1)) #> # A tibble: 2 × 15 #> # Rowwise:  iteration #>   iteration group  tps   is_test phase block_size trial_pre_func trial_post_func #>       <int> <chr>  <lis> <list>  <lis> <list>     <list>         <list>          #> 1         1 Group… <int> <lgl>   <chr> <dbl [10]> <list [2]>     <list [2]>      #> 2         1 Group… <int> <lgl>   <chr> <dbl [10]> <list [2]>     <list [2]>      #> # … with 7 more variables: trial_pre_nomi <list>, trial_post_nomi <list>, #> #   trial_names <list>, stim_alphas <list>, unique_functional_stimuli <list>, #> #   unique_nominal_stimuli <list>, nomi_func_map <list>"},{"path":"http://victornavarro.org/heidi/reference/parse_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse each string in a data.frame — parse_design","title":"Parse each string in a data.frame — parse_design","text":"Parse string data.frame","code":""},{"path":"http://victornavarro.org/heidi/reference/parse_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse each string in a data.frame — parse_design","text":"","code":"parse_design(df)"},{"path":"http://victornavarro.org/heidi/reference/parse_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse each string in a data.frame — parse_design","text":"df data.frame dimensions Groups, 2*Phases+1","code":""},{"path":"http://victornavarro.org/heidi/reference/parse_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse each string in a data.frame — parse_design","text":"tibble containing parsed design long format.","code":""},{"path":"http://victornavarro.org/heidi/reference/parse_design.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Parse each string in a data.frame — parse_design","text":"entry even-numbered columns df string formatted per trial_parser.","code":""},{"path":[]},{"path":"http://victornavarro.org/heidi/reference/parse_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse each string in a data.frame — parse_design","text":"","code":"df <- data.frame(Group = c('Group 1', 'Group 2'), P1 = c('10AB(US)', '10A(US)'), R1 = c(TRUE, TRUE)) parse_design(df) #> # A tibble: 2 × 5 #>   group   phase parse_string randomize trial_info        #>   <chr>   <chr> <chr>        <lgl>     <list>            #> 1 Group 1 P1    10AB(US)     TRUE      <named list [10]> #> 2 Group 2 P1    10A(US)      TRUE      <named list [10]>"},{"path":"http://victornavarro.org/heidi/reference/pati.html","id":null,"dir":"Reference","previous_headings":"","what":"Rat responses from Patittucci et al. 2016 — pati","title":"Rat responses from Patittucci et al. 2016 — pati","text":"dataset containing rat nose pokes lever presses presented lever presses associated different appetitive stimuli.","code":""},{"path":"http://victornavarro.org/heidi/reference/pati.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rat responses from Patittucci et al. 2016 — pati","text":"","code":"pati"},{"path":"http://victornavarro.org/heidi/reference/pati.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Rat responses from Patittucci et al. 2016 — pati","text":"tibble following variables: subject subject identifier block 2-session block training (1 8) lever lever presented trial: L = left; R = right us stimulus followed lever: P = pellet; S = sucrose response response: lp = lever press; np = nose poke rpert responses per trial","code":""},{"path":"http://victornavarro.org/heidi/reference/pati.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Rat responses from Patittucci et al. 2016 — pati","text":"Patittucci et al. (2016). JEP:ALC","code":""},{"path":"http://victornavarro.org/heidi/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"http://victornavarro.org/heidi/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"http://victornavarro.org/heidi/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"http://victornavarro.org/heidi/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"http://victornavarro.org/heidi/reference/quick_heidi.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the HeiDI model (quickly) — quick_heidi","title":"Run the HeiDI model (quickly) — quick_heidi","text":"Runs model minimal parameters.","code":""},{"path":"http://victornavarro.org/heidi/reference/quick_heidi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the HeiDI model (quickly) — quick_heidi","text":"","code":"quick_heidi(design_df, param_df = NULL, options = NULL, parse = TRUE)"},{"path":"http://victornavarro.org/heidi/reference/quick_heidi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the HeiDI model (quickly) — quick_heidi","text":"design_df data.frame dimensions G,2*P+1; G number groups P number phases. param_df data.frame dimensions N,2; N number stimuli experimental design. options list options, returned get_heidi_opts. parse logical specifying whether results parsed. Default = TRUE.","code":""},{"path":"http://victornavarro.org/heidi/reference/quick_heidi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run the HeiDI model (quickly) — quick_heidi","text":"list parsed results tibble raw results","code":""},{"path":"http://victornavarro.org/heidi/reference/quick_heidi.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Run the HeiDI model (quickly) — quick_heidi","text":"specification design_df adhere following rules: first column specify Group names remaining columns paired, pair denoting single experimental phase. first containing trial strings (see ) logicals denoting whether trials randomized . Trial strings use specific syntax. Take string \"30AX(US)/10A\", example. \"/\" character used denote different trials. , string specifies two trial types. Parentheses used denote complex stimuli (stimuli need specifically named). , US named stimulus. numbers beginning trial type denote number trials given within phase.","code":""},{"path":[]},{"path":"http://victornavarro.org/heidi/reference/run_heidi.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the HeiDI model — run_heidi","title":"Run the HeiDI model — run_heidi","text":"Runs model especific arguments.","code":""},{"path":"http://victornavarro.org/heidi/reference/run_heidi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the HeiDI model — run_heidi","text":"","code":"run_heidi(args, parse = TRUE)"},{"path":"http://victornavarro.org/heidi/reference/run_heidi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the HeiDI model — run_heidi","text":"args tibble returned make_heidi_args. parse logical specifying whether results parsed. Default = TRUE.","code":""},{"path":"http://victornavarro.org/heidi/reference/run_heidi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run the HeiDI model — run_heidi","text":"list parsed results tibble raw results","code":""},{"path":[]},{"path":"http://victornavarro.org/heidi/reference/train_pav_heidi.html","id":null,"dir":"Reference","previous_headings":"","what":"Trains a Pavlovian HeiDI — train_pav_heidi","title":"Trains a Pavlovian HeiDI — train_pav_heidi","text":"Trains Pavlovian HeiDI","code":""},{"path":"http://victornavarro.org/heidi/reference/train_pav_heidi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trains a Pavlovian HeiDI — train_pav_heidi","text":"","code":"train_pav_heidi(   sals,   V,   tps,   trial_pre_func,   trial_post_func,   trial_pre_nomi,   trial_post_nomi,   nomi_func_map,   trial_names = NULL,   phase = NULL,   block_size = NULL,   is_test = rep(FALSE, length(tps)) )"},{"path":"http://victornavarro.org/heidi/reference/train_pav_heidi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trains a Pavlovian HeiDI — train_pav_heidi","text":"sals named vector stimulus saliencies. V named array dimensions S,S; S number stimuli. tps vector trial pointers training, function trials. trial_pre_func list length T, character vectors specifying functional stimuli involved expectation part trial. T number unique trials experiment. trial_post_func , correction part trial. trial_pre_nomi list length T, character vectors specifying nominal stimuli involved expectation part trial. trial_post_nomi , correctino part trial. nomi_func_map data.frame mappings nominal functional stimuli trial_names (optional) character vector length T names trials phase (optional) character vector length T names phases block_size (optional) integer vector length T specifying block size per trial is_test (optional) logical vector specifying whether trial result learning (update V). element TRUE, update occurs.","code":""},{"path":"http://victornavarro.org/heidi/reference/train_pav_heidi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trains a Pavlovian HeiDI — train_pav_heidi","text":"list vs, rs - Arrays dimensions P,S,S; P number trials used train model S number stimuli involved experiment. Respectively, vs rs contain stimulus weights stimulus-specific responses. combs, chains - Lists length P activation values. tps, trial_pre_func, trial_post_func, trial_pre_nomi, trial_post_nomi, nomi_func_map, trial_names, phase, block_size, is_test -  Carryover processing. See Arguments.","code":""},{"path":"http://victornavarro.org/heidi/reference/train_pav_heidi.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Trains a Pavlovian HeiDI — train_pav_heidi","text":"array V contains associations stimuli involved experiment. Entry ,j specifies associative strength stimulus stimulus j. Entry j,specifies opposite direction.","code":""},{"path":"http://victornavarro.org/heidi/reference/trial_parser.html","id":null,"dir":"Reference","previous_headings":"","what":"Parses a string stipulating trials — trial_parser","title":"Parses a string stipulating trials — trial_parser","text":"Parses string stipulating trials","code":""},{"path":"http://victornavarro.org/heidi/reference/trial_parser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parses a string stipulating trials — trial_parser","text":"","code":"trial_parser(trial_string)"},{"path":"http://victornavarro.org/heidi/reference/trial_parser.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parses a string stipulating trials — trial_parser","text":"trial_string string","code":""},{"path":"http://victornavarro.org/heidi/reference/trial_parser.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parses a string stipulating trials — trial_parser","text":"list trial_names: character vector specifying names trials contained string trial_repeats: numeric vector specifying number times trial given trial_pre_functional: list character vectors specifying unique functional stimuli expectation part trial trial_post_functional: list character vectors specifying unique functional stimuli correction part trial trial_pre_nominal: list character vectors specifying nominal stimuli expectation part trial trial_post_nominal: list character vectors specifying nominal stimuli expectation part trial nomi_func_map: data.frame specifying mapping functional nominal stimuli unique_nominal stimuli: character vector unique nominal stimuli unique_functional_stimuli: character vector unique functional stimuli is_test: logical vector specifying whether trial result learning","code":""},{"path":"http://victornavarro.org/heidi/reference/trial_parser.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Parses a string stipulating trials — trial_parser","text":"Supports complex stimuli parentheses (e.g., \"5A>(US)\") Supports multiple versions stimuli (e.g., \"3(A_a)>(US_a)/3(A_b)>(US_b)\") Supports probe trials, followed hash (e.g., \"3X#\") trials \">\" character, assumed specified stimuli used generation expectation/responding. , \"post\" entries list contain NAs, necessary. trials, \"post\" stimuli none (character(0) vector).","code":""},{"path":"http://victornavarro.org/heidi/reference/trial_parser.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parses a string stipulating trials — trial_parser","text":"","code":"trial_parser(\"30A\") #> $trial_names #> [1] \"A\" #>  #> $trial_repeats #> [1] 30 #>  #> $trial_pre_functional #> $trial_pre_functional[[1]] #> [1] \"A\" #>  #>  #> $trial_post_functional #> $trial_post_functional[[1]] #> character(0) #>  #>  #> $trial_pre_nominal #> $trial_pre_nominal[[1]] #> [1] \"A\" #>  #>  #> $trial_post_nominal #> $trial_post_nominal[[1]] #> character(0) #>  #>  #> $nomi_func_map #>   nomi func #> 1    A    A #>  #> $unique_nominal_stimuli #> [1] \"A\" #>  #> $unique_functional_stimuli #> [1] \"A\" #>  #> $is_test #> [1] FALSE #>  trial_parser(\"30XA>U/30(YA)>A\") #> $trial_names #> [1] \"XA>U\"   \"(YA)>A\" #>  #> $trial_repeats #> [1] 30 30 #>  #> $trial_pre_functional #> $trial_pre_functional[[1]] #> [1] \"X\" \"A\" #>  #> $trial_pre_functional[[2]] #> [1] \"YA\" #>  #>  #> $trial_post_functional #> $trial_post_functional[[1]] #> [1] \"U\" #>  #> $trial_post_functional[[2]] #> [1] \"A\" #>  #>  #> $trial_pre_nominal #> $trial_pre_nominal[[1]] #> [1] \"X\" \"A\" #>  #> $trial_pre_nominal[[2]] #> [1] \"YA\" #>  #>  #> $trial_post_nominal #> $trial_post_nominal[[1]] #> [1] \"U\" #>  #> $trial_post_nominal[[2]] #> [1] \"A\" #>  #>  #> $nomi_func_map #>   nomi func #> 1    X    X #> 2    A    A #> 4   YA   YA #> 5    U    U #>  #> $unique_nominal_stimuli #> [1] \"X\"  \"A\"  \"U\"  \"YA\" #>  #> $unique_functional_stimuli #> [1] \"X\"  \"A\"  \"YA\" \"U\"  #>  #> $is_test #> [1] FALSE FALSE #>  trial_parser(\"1X#/2X>(US)#\") #> $trial_names #> [1] \"X#\"      \"X>(US)#\" #>  #> $trial_repeats #> [1] 1 2 #>  #> $trial_pre_functional #> $trial_pre_functional[[1]] #> [1] \"X\" #>  #> $trial_pre_functional[[2]] #> [1] \"X\" #>  #>  #> $trial_post_functional #> $trial_post_functional[[1]] #> character(0) #>  #> $trial_post_functional[[2]] #> [1] \"US\" #>  #>  #> $trial_pre_nominal #> $trial_pre_nominal[[1]] #> [1] \"X\" #>  #> $trial_pre_nominal[[2]] #> [1] \"X\" #>  #>  #> $trial_post_nominal #> $trial_post_nominal[[1]] #> character(0) #>  #> $trial_post_nominal[[2]] #> [1] \"US\" #>  #>  #> $nomi_func_map #>   nomi func #> 1    X    X #> 6   US   US #>  #> $unique_nominal_stimuli #> [1] \"X\"  \"US\" #>  #> $unique_functional_stimuli #> [1] \"X\"  \"US\" #>  #> $is_test #> [1] TRUE TRUE #>  trial_parser(\"1X>(US_a)/1Y>(US_b)\") #> $trial_names #> [1] \"X>(US_a)\" \"Y>(US_b)\" #>  #> $trial_repeats #> [1] 1 1 #>  #> $trial_pre_functional #> $trial_pre_functional[[1]] #> [1] \"X\" #>  #> $trial_pre_functional[[2]] #> [1] \"Y\" #>  #>  #> $trial_post_functional #> $trial_post_functional[[1]] #> [1] \"US\" #>  #> $trial_post_functional[[2]] #> [1] \"US\" #>  #>  #> $trial_pre_nominal #> $trial_pre_nominal[[1]] #> [1] \"X\" #>  #> $trial_pre_nominal[[2]] #> [1] \"Y\" #>  #>  #> $trial_post_nominal #> $trial_post_nominal[[1]] #> [1] \"US_a\" #>  #> $trial_post_nominal[[2]] #> [1] \"US_b\" #>  #>  #> $nomi_func_map #>   nomi func #> 1    X    X #> 2    Y    Y #> 4 US_a   US #> 6 US_b   US #>  #> $unique_nominal_stimuli #> [1] \"X\"    \"Y\"    \"US_a\" \"US_b\" #>  #> $unique_functional_stimuli #> [1] \"X\"  \"Y\"  \"US\" #>  #> $is_test #> [1] FALSE FALSE #>"},{"path":"http://victornavarro.org/heidi/news/index.html","id":"heidi-010","dir":"Changelog","previous_headings":"","what":"heidi 0.1.0","title":"heidi 0.1.0","text":"Major overhaul training function (train_pav_heidi). relevant calculations now done function functional stimuli instead just US. Support specification expectation/correction steps within trial via “>”. example, trial “>(US)” use generate expectation, learn stimuli correction step. previous plotting function R-values revamped allow simple complex versions. complex version facets r-values predictor basis, uses colour lines target. Bugfix related stimulus saliencies.","code":""},{"path":"http://victornavarro.org/heidi/news/index.html","id":"heidi-0009000","dir":"Changelog","previous_headings":"","what":"heidi 0.0.0.9000","title":"heidi 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
