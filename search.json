[{"path":"http://victornavarro.org/calmr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"http://victornavarro.org/calmr/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"http://victornavarro.org/calmr/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"http://victornavarro.org/calmr/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"http://victornavarro.org/calmr/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"http://victornavarro.org/calmr/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"http://victornavarro.org/calmr/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"http://victornavarro.org/calmr/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"http://victornavarro.org/calmr/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"http://victornavarro.org/calmr/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"http://victornavarro.org/calmr/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"http://victornavarro.org/calmr/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"http://victornavarro.org/calmr/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"http://victornavarro.org/calmr/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"http://victornavarro.org/calmr/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"http://victornavarro.org/calmr/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"http://victornavarro.org/calmr/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"http://victornavarro.org/calmr/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"http://victornavarro.org/calmr/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"http://victornavarro.org/calmr/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"http://victornavarro.org/calmr/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"http://victornavarro.org/calmr/articles/PKH1982_math.html","id":"the-mathematics-behind-pkh1982","dir":"Articles","previous_headings":"","what":"The mathematics behind PKH1982","title":"PKH1982_math","text":"Another departure global error term models RW1972 (Rescorla & Wagner, 1972), PKH1982 model (Pearce et al., 1982) use error term learning excitatory associations (inhibitory associations), ties stimulus associability (\\(\\alpha\\)) absolute global prediction error. note: implementation model closely follows technical note CAL-R group possible. Divergences noted.","code":""},{"path":"http://victornavarro.org/calmr/articles/PKH1982_math.html","id":"generating-expectations","dir":"Articles","previous_headings":"The mathematics behind PKH1982","what":"1 - Generating expectations","title":"PKH1982_math","text":"Let \\(v_{k,j}\\) denote excitatory strength stimulus \\(k\\) stimulus \\(j\\), \\(v_{k,\\overline j}\\) inhibitory strength stimulus \\(k\\) stimulus \\(j\\) (effectively, “j” representation). given trial, net expectation stimulus \\(j\\), \\(e_j\\), given : \\[ \\tag{Eq.1} e_j = \\sum_{k}^{K}x_k v_{k,j} - \\sum_{k}^{K}x_k v_{k,\\overline j} \\] \\(x_k\\) denotes presence (1) absence (0) stimulus \\(k\\), set \\(K\\) represents stimuli design.","code":""},{"path":"http://victornavarro.org/calmr/articles/PKH1982_math.html","id":"learning-associations","dir":"Articles","previous_headings":"The mathematics behind PKH1982","what":"2 - Learning associations","title":"PKH1982_math","text":"Changes excitatory inhibitory associations stimuli given : \\[ \\tag{Eq.2a} \\Delta v_{,j} = \\delta_jx_i \\beta_{ex,j} \\alpha_i \\lambda_j \\] \\[ \\tag{Eq.2b} \\Delta v_{,\\overline j} = x_i \\beta_{,j} \\alpha_i  |\\overline{\\lambda_j}| \\] \\(\\beta_{ex,j}\\) \\(\\beta_{,j}\\) represent learning rates excitatory inhibitory associations, respectively, determined stimulus \\(j\\), \\(\\alpha_i\\) associability stimulus \\(\\), respectively, \\(\\lambda_j\\) \\(\\overline {\\lambda_j}\\) excitatory asymptote overexpectation stimulus \\(j\\), respectively. Importantly, \\(\\delta_j\\) Eq.2a parameter equal 1 expectation stimulus \\(j\\), lower excitatory asymptote (.e., \\(e_j < \\lambda_j\\)), 0 . implies model stops strengthening \\(v_{,j}\\) expectation \\(j\\) higher excitatory assymptote. mentioned introductory note, PKH1982 model learn excitatory associations via correction error. However, model learn inhibitory associations via correction error, overexpectation term , \\(\\overline {\\lambda_j}\\) equal \\(min(\\lambda_j - e_j, 0)\\), \\(min\\) minimum function. implies \\(\\overline {\\lambda_j}\\) takes non-zero values expectation \\(j\\) higher intensity trial (\\(\\lambda_j\\)).","code":""},{"path":"http://victornavarro.org/calmr/articles/PKH1982_math.html","id":"learning-to-attend","dir":"Articles","previous_headings":"The mathematics behind PKH1982","what":"3 - Learning to attend","title":"PKH1982_math","text":"associability parameter \\(\\alpha_i\\) changes completely trial trial function learning (note lack \\(\\Delta\\) ), change equal difference absolute global error, via: \\[ \\tag{Eq.3} \\Delta \\alpha_{} = x_i \\sum_{j}^{K}\\gamma_j(|\\lambda_j - e_j|) \\] \\(\\gamma_j\\) denotes contribution prediction error based jth stimulus. regard, important note Pearce et al. (1982) extend model account predictive power within-compound associations, yet implementation model package . can sometimes result unexpected behaviour, , Eq. 3 includes extra parameter \\(\\gamma_j\\) (defaulting 1/K) denotes whether expectation stimulus \\(j\\) contributes attentional learning. , user can set parameters manually order reflect contribution different experimental stimuli. example, simple “AB>(US)” design, setting \\(\\gamma_{US}\\) = 1 \\(\\gamma_{} = \\gamma_{B} = 0\\) leads behaviour original model. PKH1982 model improves upon Pearce & Hall (1980) model adding extra parameter controls rate associability changes. qualify changes associability determined Eq.3 via \\(\\Delta\\alpha_{}^{n}\\) (meaning happened trial \\(n\\)), can quantify total associability stimulus \\(\\) trial \\(n\\) via: \\[ \\tag{Eq.4} \\alpha_{}^{n} = \\begin{cases}   (1-\\theta_i) \\alpha_{}^{n-1} + \\theta_i\\Delta\\alpha_{j}^n &\\text{, } x_i = 1\\\\   \\alpha_{}^{n} & \\text{, otherwise} \\end{cases} \\] \\(\\theta_i\\) parameter determining rate associability decays (via \\(1-\\theta_i\\)), rate increments attention occur. Note changes associability apply stimuli presented trial (.e., \\(x_i = 1\\)); attention absent stimuli remains unchanged.","code":""},{"path":"http://victornavarro.org/calmr/articles/PKH1982_math.html","id":"generating-responses","dir":"Articles","previous_headings":"The mathematics behind PKH1982","what":"4 - Generating responses","title":"PKH1982_math","text":"specification response-generating mechanisms PKH1982. However, simplest response function can adopted identity function stimulus expectations. , responses reflecting nature \\(j\\), \\(r_j\\), given : \\[ \\tag{Eq.5} r_j = e_j \\]","code":""},{"path":[]},{"path":"http://victornavarro.org/calmr/articles/RW1972_math.html","id":"the-mathematics-behind-rw1972","dir":"Articles","previous_headings":"","what":"The mathematics behind RW1972","title":"RW1972_math","text":"influential associative learning model, RW1972 (Rescorla & Wagner, 1972), learns global error posits changes stimulus associability.","code":""},{"path":"http://victornavarro.org/calmr/articles/RW1972_math.html","id":"generating-expectations","dir":"Articles","previous_headings":"The mathematics behind RW1972","what":"1 - Generating expectations","title":"RW1972_math","text":"Let \\(v_{k,j}\\) denote associative strength stimulus \\(k\\) stimulus \\(j\\). given trial, expectation stimulus \\(j\\), \\(e_j\\), given : \\[ \\tag{Eq.1} e_j = \\sum_{k}^{K}x_k v_{k,j} \\] \\(x_k\\) denotes presence (1) absence (0) stimulus \\(k\\), set \\(K\\) represents stimuli design.","code":""},{"path":"http://victornavarro.org/calmr/articles/RW1972_math.html","id":"learning-associations","dir":"Articles","previous_headings":"The mathematics behind RW1972","what":"2 - Learning associations","title":"RW1972_math","text":"Changes association stimulus \\(\\) \\(j\\), \\(v_{,j}\\), given : \\[ \\tag{Eq.2} \\Delta v_{,j} = \\alpha_i \\beta_j (\\lambda_j - e_j) \\] \\(\\alpha_i\\) associability stimulus \\(\\), \\(\\beta_j\\) learning rate parameter determined properties \\(j\\)1, \\(\\lambda_j\\) maximum association strength supported \\(j\\) (asymptote).","code":""},{"path":"http://victornavarro.org/calmr/articles/RW1972_math.html","id":"generating-responses","dir":"Articles","previous_headings":"The mathematics behind RW1972","what":"3 - Generating responses","title":"RW1972_math","text":"specification response-generating mechanisms RW1972. However, simplest response function can adopted identity function stimulus expectations. , responses reflecting nature \\(j\\), \\(r_j\\), given : \\[ \\tag{Eq.3} r_j = e_j \\]","code":""},{"path":[]},{"path":"http://victornavarro.org/calmr/articles/SM2007_math.html","id":"the-mathematics-behind-socr","dir":"Articles","previous_headings":"","what":"The mathematics behind SOCR","title":"SM2007_math","text":"first formalization comparator hypothesis (Miller & Matzel, 1988), sometimes competing retrieval model (SOCR; Stout & Miller, 2007) learns local error responds function relative associative strength present retrieved stimuli.","code":""},{"path":"http://victornavarro.org/calmr/articles/SM2007_math.html","id":"learning-associations","dir":"Articles","previous_headings":"The mathematics behind SOCR","what":"1 - Learning associations","title":"SM2007_math","text":"SOCR model uses two different learning equations strengthening weakening associations. Whenever two stimuli contiguous, strengthening occurs. case, strengthening association stimulus \\(\\) \\(j\\) trial \\(t\\), \\(v_{,j}^t\\) given : \\[ \\tag{Eq.1a} \\Delta v_{,j}^t = x^t_i \\alpha_i \\alpha_j (\\lambda_j - v_{,j}^{t-1}) \\] \\(x^t_i\\) denotes presence (1) absence (0) stimulus \\(\\) trial \\(t\\). , SOCR model learns stimuli presented. parameters \\(\\alpha_i\\) \\(\\alpha_j\\) saliencies stimuli j, respectively, \\(\\lambda_j\\) maximum association strength supported \\(j\\) (asymptote). Whenever stimulus \\(\\) presented alone (.e., stimulus \\(j\\) absent), weakening association given : \\[ \\tag{Eq.1b} \\Delta v_{,j}^t = x_i \\alpha_i \\times -\\omega_j v_{,j}^{t-1} \\] \\(\\omega_j\\) determines weakening rate stimulus \\(j\\).1","code":""},{"path":"http://victornavarro.org/calmr/articles/SM2007_math.html","id":"activating-stimuli","dir":"Articles","previous_headings":"The mathematics behind SOCR","what":"2 - Activating stimuli","title":"SM2007_math","text":"SOCR posits competition stimuli presented /associatively retrieved. Dropping trial notation sake simplicity, degree stimulus \\(\\) activates stimulus \\(j\\), \\(act_{,j}\\), given : \\[ \\tag{Eq.2} act_{, j} = x_i v_{,j} + x_j\\rho_j\\alpha_j \\] \\(\\rho_j\\) (bound 0 +\\(\\infty\\)) determines much salience stimulus \\(j\\) contributes unconditioned activation. first-order activation values key quantities involved comparison processes.","code":""},{"path":"http://victornavarro.org/calmr/articles/SM2007_math.html","id":"generating-responses-and-comparison-processes","dir":"Articles","previous_headings":"The mathematics behind SOCR","what":"3 - Generating responses and comparison processes","title":"SM2007_math","text":"Stimulus \\(\\) generates j-oriented responding time retrieval function relative ability activate stimulus \\(j\\). relative ability expressed comparison process, given : \\[ \\tag{Eq.3} r^j_i = act_{,j} - \\Sigma_{k \\neq ,j} ^K \\gamma_k \\times o_{,k,j} \\times r^k_i \\times r^j_k \\] \\(r^j_i\\) relative activation stimulus \\(j\\) stimulus \\(\\), \\(K\\) set experimental stimuli including \\(\\) \\(j\\), \\(\\gamma_k\\) parameter determining degree stimulus \\(k\\), comparison stimulus, contributes comparison process (bound 0 1), \\(o_{,k,j}\\) operator switch determines whether \\(\\) \\(k\\) associations \\(j\\) engage facilitation competition. Finally, \\(r^k_i\\) relative activation stimulus \\(k\\) stimulus \\(\\), representing ability stimulus \\(\\) activate comparison, \\(r^j_k\\) relative activation stimulus \\(j\\) stimulus \\(k\\), representing ability comparison stimulus \\(k\\) activate stimulus \\(j\\).2 notably, last two quantities (\\(r^k_i\\) \\(r^j_k\\)) also determined corresponding instantiations Eq. 3. , involve comparison processes . number potential comparison processes technically infinite (comparison process can nest two extra comparison processes ), user must determine order model using extra global parameter (order). n-th order models (\\(n > 0\\)), model behave like extended comparator hypothesis (Denniston et al., 2001), implementing \\(n\\) comparison processes time relative activations calculated. order = 0, SM2007 behave like originally written, consider one comparison process. Indeed, n-th order models accomplished via recursion using 0-th order model stopping condition. condition reached, \\(r^k_i\\) \\(r^j_k\\) terms Eq. 3 become \\(act_{,k}\\) \\(act_{k,j}\\), respectively.","code":""},{"path":"http://victornavarro.org/calmr/articles/SM2007_math.html","id":"switching-between-facilitation-and-competition","dir":"Articles","previous_headings":"The mathematics behind SOCR","what":"4 - Switching between facilitation and competition","title":"SM2007_math","text":"operator switch Eq. 3, \\(o_{,k,j}\\), changes subjects learn discriminate directly (via \\(\\)) indirectly activated (via \\(k\\)) representations stimulus \\(j\\). change quantity depends value \\(v_{,j}\\), follows: \\[ \\tag{Eq.4} \\Delta o_{,k,j} = \\begin{cases}   \\tau_j\\alpha_iv_{,k}v_{k,j}(1-o_{,k,j})   &\\text{, } v_{,j} = 0\\\\   1-o_{,k,j} & \\text{, otherwise} \\end{cases} \\] negative values \\(o\\) indicate facilitation positive values \\(o\\) indicate competition. default value operator switches outset training set -1 default. parameter \\(\\tau_j\\) specifies learning rate operator switches related stimulus \\(j\\).","code":""},{"path":[]},{"path":"http://victornavarro.org/calmr/articles/SM2007_sims.html","id":"the-fixed-parameters","dir":"Articles","previous_headings":"","what":"The fixed parameters","title":"SM2007_sims","text":"Witnauer et al (2012), set alphas cues, contexts, US 0.35, 0.15, 0.50, respectively. rate associations weaken (k1, , omega) set 0.22. weight comparison stimuli compete (k2, , gamma) set 0.56. rate operator switch learned (k3, , tau) set 0.46. Finally, strength present stimuli activated (k4, , rho; see Eq. 4 paper) set 1.60.","code":""},{"path":"http://victornavarro.org/calmr/articles/SM2007_sims.html","id":"acquisition","dir":"Articles","previous_headings":"","what":"Acquisition","title":"SM2007_sims","text":"","code":"mod <- \"SM2007\" des <- data.frame(Group = \"Acquisition\",                   P1 = \"100(ctxa)A>(US)/300(ctxa)\",                   R1 = F,                   P2 = \"1#(ctxa)A/1#(ctxb)A\",                   R2 = F)   pars <- get_model_params(des, model = mod) pars$alphas <- c(.35, .15, .5, .15) pars$omegas <- .22 pars$gammas <- .56 pars$rhos <- 1.6 pars$taus <- .46  pars ##   stimulus alphas lambdas omegas rhos gammas taus orders ## 1        A   0.35       1   0.22  1.6   0.56 0.46      1 ## 2     ctxa   0.15       1   0.22  1.6   0.56 0.46      1 ## 3       US   0.50       1   0.22  1.6   0.56 0.46      1 ## 4     ctxb   0.15       1   0.22  1.6   0.56 0.46      1 m <- run_experiment(des, model = mod, param_df = pars)  #plot(m, \"relacts\") #Fig 2 A m@parsed_results$relacts %>%   filter(s2 == \"US\" & trial_type == \"(ctxa)A>(US)\" & phase == \"P1\") %>%   mutate(trial = ceiling(trial/block_size)) %>%   group_by(trial) %>% summarise(value = sum(value)) %>%   ggplot(aes(x = trial, y = value)) +   geom_line() + geom_point() #overall responding levels are higher for calmr  #Fig 2 B m@parsed_results$relacts %>%   filter(s2 == \"US\" & phase == \"P2\") %>%   group_by(trial_type) %>% summarise(value = sum(value)) %>%   mutate(trial_type = ifelse(grepl(\"b\", trial_type),                               \"Neutral Ctx\", \"Acquisition Ctx\")) %>%   ggplot(aes(x = trial_type, y = value)) +   geom_col() #overall responding levels are higher for calmr"},{"path":"http://victornavarro.org/calmr/articles/SM2007_sims.html","id":"extinction","dir":"Articles","previous_headings":"","what":"Extinction","title":"SM2007_sims","text":"","code":"des <- data.frame(Group = \"Extinction\", P1 = \"10(ctxa)A>(US)/30(ctxa)\", R1 = F, P2 = \"30(ctxb)A/90(ctxb)\", R2 = F, P3 = \"1#(ctxa)A/1#(ctxb)A\", R3 = F)   pars <- get_model_params(des, model = mod) pars$alphas <- c(.35, .15, .5, .15) pars$omegas <- .22 pars$gammas <- .56 pars$rhos <- 1.6 pars$taus <- .46  pars ##   stimulus alphas lambdas omegas rhos gammas taus orders ## 1        A   0.35       1   0.22  1.6   0.56 0.46      1 ## 2     ctxa   0.15       1   0.22  1.6   0.56 0.46      1 ## 3       US   0.50       1   0.22  1.6   0.56 0.46      1 ## 4     ctxb   0.15       1   0.22  1.6   0.56 0.46      1 m <- run_experiment(des, model = mod, param_df = pars) #plot(m, \"relacts\") #Fig 4 A m@parsed_results$relacts %>% filter(s2 == \"US\" & trial_type == \"(ctxb)A\" & phase == \"P2\") %>% mutate(trial = ceiling(trial/block_size)) %>% group_by(trial) %>% summarise(value = sum(value)) %>% ggplot(aes(x = trial, y = value)) + geom_line() + geom_point() #responding at the beginning of extinction is higher  m@parsed_results$relacts %>% filter(s2 == \"US\" & phase == \"P3\") %>% group_by(trial_type) %>% summarise(value = sum(value)) %>% mutate(trial_type = ifelse(grepl(\"b\", trial_type),                             \"Extinction Ctx\", \"Acquisition Ctx\")) %>% ggplot(aes(x = trial_type, y = value)) + geom_col() + coord_cartesian(ylim = c(0, .4)) #remarkably similar"},{"path":"http://victornavarro.org/calmr/articles/SM2007_sims.html","id":"second-order-conditioningconditioned-inhibition","dir":"Articles","previous_headings":"","what":"Second order conditioning/Conditioned inhibition","title":"SM2007_sims","text":"","code":"des <- data.frame(Group = c(\"Few\", \"Many\"), P1 = c(\"10(ctx)A>(US)/10(ctx)AX/10(ctx)B>(US)/90(ctx)\", \"100(ctx)A>(US)/100(ctx)AX/100(ctx)B>(US)/900(ctx)\"), R1 = F, P2 = \"1#(ctx)X/1#(ctx)BX\", R2 = F)   pars <- get_model_params(des, model = mod) pars$alphas <- c(.35, .35, .35, .15, .5) pars$omegas <- .22 pars$gammas <- .56 pars$rhos <- 1.6 pars$taus <- .46  m <- run_experiment(des, model = mod, param_df = pars) #plot(m, \"relacts\") #Fig 6 m@parsed_results$relacts %>% filter(s2 == \"US\" & phase == \"P2\") %>% group_by(group, trial_type) %>% summarise(value = sum(value)) %>% mutate(trial_type = ifelse(grepl(\"B\", trial_type), \"Summation\", \"Elemental\")) %>% ggplot(aes(x = group, y = value, fill = trial_type)) + geom_col(position = position_dodge()) #pretty close, but scales are a little bit off"},{"path":"http://victornavarro.org/calmr/articles/SM2007_sims.html","id":"blocking","dir":"Articles","previous_headings":"","what":"Blocking","title":"SM2007_sims","text":"","code":"des <- data.frame(Group = c(\"Elemental\", \"Overshadowing\", \"Blocking\", \"Recovery From Blocking\"), P1 = \"10(ctx)A>(US)/180(ctx)\", R1 = F, P2 = c(\"5(ctx)X>(US)/90(ctx)\", \"5(ctx)BX>(US)/90(ctx)\", \"5(ctx)AX>(US)/90(ctx)\", \"5(ctx)AX>(US)/90(ctx)\"), R2 = F, P3 = c(\"\", \"\", \"\", #nothing for the first three grups \"5(ctx)A/90(ctx)\"), R3 = F, P4 = c(\"1#(ctx)X\"), R4 = F)   pars <- get_model_params(des, model = mod) pars$alphas <- c(.35, .15, .5, .35, .35) pars$omegas <- .22 pars$gammas <- .56 pars$rhos <- 1.6 pars$taus <- .46  m <- run_experiment(des, model = mod, param_df = pars) #plot(m, \"relacts\") #Fig 10 m@parsed_results$relacts %>% filter(s2 == \"US\" & phase == \"P4\") %>% group_by(group) %>% summarise(value = sum(value)) %>% ggplot(aes(x = group, y = value, fill = group)) + geom_col() #not even close #perhaps not enough information to do the simulation?"},{"path":"http://victornavarro.org/calmr/articles/SM2007_sims.html","id":"unequal-associative-changes","dir":"Articles","previous_headings":"","what":"Unequal associative changes","title":"SM2007_sims","text":"","code":"mod <- \"SM2007\" des <- data.frame(Group = \"Unequal\", P1 = \"100(ctx)X>(US)/100(ctx)XB/100(ctx)XD/100(ctx)A>(US)/100(ctx)C>(US)/1500(ctx)\", R1 = F, P2 = \"3(ctx)AB>(US)/9(ctx)\", R2 = F, P3 = c(\"1#(ctx)AD/1#(ctx)BC\"), R3 = F)  pars <- get_model_params(des, model = mod) pars$alphas <- c(.35, .35, .35, .35, .35, .15, .50) pars$omegas <- .22 pars$gammas <- .56 pars$rhos <- 1.6 pars$taus <- .46  m <- run_experiment(des, model = mod, param_df = pars) #takes a bit #plot(m, \"relacts\") #Fig 14 m@parsed_results$relacts %>% filter(s2 == \"US\" & phase == \"P3\") %>% mutate(trial_type = ifelse(grepl(\"AD\", trial_type), \"Test AD\", \"Test BC\")) %>% group_by(trial_type) %>% summarise(value = sum(value)) %>% ggplot(aes(x = trial_type, y = value)) + geom_point() #effect in the right direction, but differnce is 4 times as a big (.02 in the paper, .08 here)"},{"path":"http://victornavarro.org/calmr/articles/SM2007_sims.html","id":"cs-preexposure","dir":"Articles","previous_headings":"","what":"CS Preexposure","title":"SM2007_sims","text":"","code":"des <- data.frame(Group = \"CSPreexposure\", P1 = \"66(ctx)P/198(ctx)\", R1 = F, P2 = \"6(ctx)P>(US)/6(ctx)N>(US)/36(ctx)\", R2 = F)  pars <- get_model_params(des, model = mod) pars$alphas <- c(.35, .15, .35, .50) pars$omegas <- .22 pars$gammas <- .56 pars$rhos <- 1.6 pars$taus <- .46  m <- run_experiment(des, model = mod, param_df = pars) #plot(m, \"relacts\") #Fig 14 m@parsed_results$relacts %>% filter(s2 == \"US\" & phase == \"P2\" & trial_type != \"(ctx)\") %>% mutate(trial = ceiling(trial/block_size)) %>% mutate(trial_type = ifelse(grepl(\"P\", trial_type), \"Preexposed\", \"Novel\")) %>% group_by(trial, trial_type) %>% summarise(value = sum(value)) %>% ggplot(aes(x = trial, y = value, colour = trial_type)) + geom_point() + geom_line() #fairly close in terms of the difference, but scale is off"},{"path":[]},{"path":"http://victornavarro.org/calmr/articles/calmr_app.html","id":"using-the-calmr-app","dir":"Articles","previous_headings":"","what":"Using the calmr app","title":"calmr_app","text":"beginner useR simply want simulate experimental design see model , might interested using calmr application. calmr application offers GUI allows user simulate experiments without code. want use online app, can find : https://victor-navarro.shinyapps.io/calmr_app/. Alternatively, installed calmr package, can launch app via calmr::calmr_app(). rest tutorial assumes app open ready run. Let’s break GUI.","code":""},{"path":"http://victornavarro.org/calmr/articles/calmr_app.html","id":"the-gui","dir":"Articles","previous_headings":"","what":"The GUI","title":"calmr_app","text":"calmr app GUI upon launch","code":""},{"path":"http://victornavarro.org/calmr/articles/calmr_app.html","id":"design-table","dir":"Articles","previous_headings":"The GUI","what":"Design Table","title":"calmr_app","text":"design table user specifies experimental design run. Using Group- Group+, can remove add groups design. Using Phase- Phase+, can remove add phases design. Parse Design button used parse design, required step run simulation. , let’s save later. P1 P2 columns specify phases experiments, simulated left right. row columns specifies trials given corresponding group (G1 G2, case). specific syntax used (see calmr_basics additional information), now, suffice say : number trials specified via digits left. example, 10A>(US) specifies ten “>(US)” trials. Stimuli (elements) specified letters. example, 10AB>(US) specifies trial elements B followed element US (see last point). Multiple trials per phase separated via forward slash (/). “delays” presentation stimuli specified via greater-sign (>). example, 10A>(US) implies presented, , never overlapping US, Named stimuli specified within parentheses. example, (US) implies element named “US” instead compound containing elements “U” “S”. Additionally, one can choose randomize trials within phase ticking boxes R1 R2 columns. important note whatever user sets interact “Randomize trials miniblocks” option Sim Preferences portion app (see ahead). ’s full breakdown behaviour: Table checked preferences checked: Trials shuffled within miniblocks possible. example, 2A/2B gets shuffled 2 blocks containing one one B trial, 2A/1B gets shuffled 1 block containign two trials one B trial. Table unchecked preferences checked: Trials intermixed within miniblocks possible. example, 2A/2B gets shuffled 2 blocks, resulting sequence ABAB. Table checked preferences unchecked: Trials shuffled completely random. Table unchecked preferences unchecked: Trials given order appearance. example, 2A/2B results AABB sequence. Go ahead parse design. new things appear GUI.","code":""},{"path":"http://victornavarro.org/calmr/articles/calmr_app.html","id":"parameters","dir":"Articles","previous_headings":"The GUI","what":"Parameters","title":"calmr_app","text":"calmr app GUI parsing parsing valid design. user can set parameters experiment (including stimulus-related parameters). case, Rescorla-Wagner model 4 parameters per stimulus. default values fairly sensible, user can futher modify parameters hand, desired. parametrization model calmr can sometimes differ appears literature. following table contains links pages","code":""},{"path":"http://victornavarro.org/calmr/articles/calmr_app.html","id":"results","dir":"Articles","previous_headings":"The GUI","what":"Results","title":"calmr_app","text":"Note parsing, new button, “Run Model” appeared. final click button run model populate “Results” “Association Graphs” portions app. Go ahead run model. calmr app GUI running model calmr app, results shown visually. Clicking bar graph (one containing “G1: Associations” ) show plots available. first portion plot’s name denotes group’s name. case, “Associations” plots show strength associations among stimuli experiment across trials (miniblocks), faceted phases columns, origin stimuli rows. example, yellow lines denote strength B US. top column corresponds (look label right) middle column corresponds B. Go ahead explore available plots. usually self explanatory, consult documentation package case something unclear (specially using obscure models).","code":""},{"path":"http://victornavarro.org/calmr/articles/calmr_app.html","id":"association-graphs","dir":"Articles","previous_headings":"The GUI","what":"Association Graphs","title":"calmr_app","text":"bottom portion app shows network graphs depicting strength associations model given trial, groups. Yellow denotes excitatory strength (.e., positive values), gray denotes neutral strength (.e., values close zero), purple (shown ) shows inhibitory strength (.e., negative values). Go ahead move “Trial” slider explore associations model change across experiment.","code":""},{"path":"http://victornavarro.org/calmr/articles/calmr_app.html","id":"other-bits","dir":"Articles","previous_headings":"The GUI","what":"Other bits","title":"calmr_app","text":"sections implement bulk functionalities calmr app. following sections describe additional options convenience functions found useful.","code":""},{"path":"http://victornavarro.org/calmr/articles/calmr_app.html","id":"sim-preferences","dir":"Articles","previous_headings":"The GUI > Other bits","what":"Sim Preferences","title":"calmr_app","text":"pick model (default, Rescorla & Wagner, 1972), set number iterations run model (important model behaviour sensitive trial order effects), whether want create miniblocks.","code":""},{"path":"http://victornavarro.org/calmr/articles/calmr_app.html","id":"plot-preferences","dir":"Articles","previous_headings":"The GUI > Other bits","what":"Plot Preferences","title":"calmr_app","text":"can choose plot common scale y-axis (active default), filter results basis phases trial types, want .","code":""},{"path":"http://victornavarro.org/calmr/articles/calmr_app.html","id":"a-final-message","dir":"Articles","previous_headings":"The GUI","what":"A final message","title":"calmr_app","text":"Hope enjoy app! find bugs, comments, like something implemented, feel free post message package’s github repository drop line navarrov [] cardiff.ac.uk.","code":""},{"path":[]},{"path":"http://victornavarro.org/calmr/articles/calmr_basics.html","id":"ingredients","dir":"Articles","previous_headings":"Using calmr in R","what":"Ingredients","title":"calmr_basics","text":"successfully simulate need data.frame specifying groups, phases, trials experiment, (optionally) data.frame salience parameters stimuli experiment.","code":""},{"path":"http://victornavarro.org/calmr/articles/calmr_basics.html","id":"the-design-data-frame","dir":"Articles","previous_headings":"Using calmr in R","what":"The design data.frame","title":"calmr_basics","text":"design data.frame, specify experimental design. rules data.frame: row represents group. first column contains group labels. remaining columns organized pairs. first column pair specifies trials give phase, whereas second column pair specifies whether trials within phase randomized. Let’s build design matrix blocking experiment. observations trial notation: Trials preceded number. number represents number times trial given phase. “10A>(US)” means “>(US)” trial given 10 times. presence absence unconditioned stimulus denoted traditional “+” “-” symbols. Instead, use parenthesis denote “complex” stimuli. can thought element complex name (.e., one character). , “(US)” specifies single element represent US. vein, multiple characters parentheses denote individual elements. example, “AB” implies presence two stimuli, B. “>” character used separator “expectations” “correction” steps within trial. “10A>(US)” means model generates expectation , learns co-occurence US. “/” character used trial separator (imply randomization ). Thus, “1A/1B” specifies single “” trial single “B” trial given phase. Recall randomization trials within phase specified column (, R1, R2, R3). “#” character used denote probe trials. contrast real life, probe trials entail update model’s associations. , probe trials can used track development key associations, repercussion model learns normal training trials. want check trials string work simulator, can use trial_parser. Check ??trial_parser information. function returns list lot information, let’s print fields.","code":"my_blocking <- data.frame(Group = c(\"Exp\", \"Control\"),                           Phase1 = c(\"10A>(US)\", \"10C>(US)\"),                           R1 = c(FALSE, FALSE),                           Phase2 = c(\"10AB>(US)\", \"10AB>(US)\"),                           R2 = c(FALSE, FALSE),                           Test = c(\"1A#/1B#\", \"1A#/1B#\"),                           R3 = c(FALSE, FALSE)) my_blocking #>     Group   Phase1    R1    Phase2    R2    Test    R3 #> 1     Exp 10A>(US) FALSE 10AB>(US) FALSE 1A#/1B# FALSE #> 2 Control 10C>(US) FALSE 10AB>(US) FALSE 1A#/1B# FALSE trial <- trial_parser(\"AB/10AC\")  #not specifying a number of AB trials. Bad practice! trial[c(\"trial_names\", \"trial_repeats\")] #> $trial_names #> [1] \"AB\" \"AC\" #>  #> $trial_repeats #> [1]  1 10 trial <- trial_parser(\"10AB(AB)(US)\") #considering a configural cue for elements AB trial[c(\"unique_nominal_stimuli\")] #> $unique_nominal_stimuli #> [1] \"A\"  \"B\"  \"AB\" \"US\""},{"path":"http://victornavarro.org/calmr/articles/calmr_basics.html","id":"picking-a-model-and-the-parameters-data-frame","dir":"Articles","previous_headings":"Using calmr in R","what":"Picking a model and the parameters data.frame","title":"calmr_basics","text":"can run simulation design data.frame (simulation function use default salience values stimuli even model!). However, might want run model default. get models currently supported, can call supported_models(). choosing model, can set specific salience values stimuli experiment parameters data.frame. Just like design data.frame, parameters data.frame follow specific format. can get data.frame default values via get_model_params, modify specific values hand.","code":"supported_models() #> [1] \"HDI2020\" \"HD2022\"  \"RW1972\"  \"MAC1975\" \"PKH1982\" \"SM2007\"  \"RAND\"  my_pars <- get_model_params(my_blocking, model = \"HD2022\") my_pars$alphas[my_pars$stimulus == \"US\"] <- .4 my_pars #>   stimulus alphas #> 1        A    0.4 #> 2       US    0.4 #> 3        B    0.4 #> 4        C    0.4"},{"path":"http://victornavarro.org/calmr/articles/calmr_basics.html","id":"additional-options","dir":"Articles","previous_headings":"Using calmr in R > Picking a model and the parameters data.frame","what":"Additional options","title":"calmr_basics","text":"final ingredient list simulation options. can get default one get_exp_opts, modify accordingly.","code":"my_opts <- get_exp_opts() my_opts$iterations <- 3 my_opts #> $iterations #> [1] 3 #>  #> $miniblocks #> [1] TRUE"},{"path":"http://victornavarro.org/calmr/articles/calmr_basics.html","id":"simulating","dir":"Articles","previous_headings":"Using calmr in R > Picking a model and the parameters data.frame","what":"Simulating","title":"calmr_basics","text":"can finally simulate model `run_experiment``. default, function returns list aggregated data. Let’s see.","code":"my_sim <- run_experiment(design = my_blocking,                     param_df = my_pars,                     options = my_opts,                     model = \"HD2022\") my_sim #> HD2022 run with: #>  #> $alphas #>   C  US   A   B  #> 0.4 0.4 0.4 0.4  #>  #> Available model outputs: #> vs rs as acts  #>  #> Use `get_output(model, type)` to access the outputs (e.g., `get_output(object, 'vs')`)"},{"path":"http://victornavarro.org/calmr/articles/calmr_basics.html","id":"plotting","dir":"Articles","previous_headings":"Using calmr in R","what":"Plotting","title":"calmr_basics","text":", rarely want raw data. like , want see plots. Let’s use plot function different plots package (model) supports default. can get supported plots via supported_plots(model), model string model used. , paired side side:","code":"supported_plots(\"HD2022\") #> [1] \"as\"   \"acts\" \"rs\"   \"vs\""},{"path":"http://victornavarro.org/calmr/articles/calmr_basics.html","id":"stimulus-specific-responding-simple","dir":"Articles","previous_headings":"Using calmr in R > Plotting","what":"stimulus-specific responding (simple)","title":"calmr_basics","text":"plots show responding across phases (left right panels, trials within). Note, show sum R values (.e., overall level responding) per stimulus (absent present). identify sources responding (.e., whether B producing responding); , must look complex plots.","code":"plot(my_sim, type = \"rs\", simple = T) #> $Control #>  #> $Exp"},{"path":"http://victornavarro.org/calmr/articles/calmr_basics.html","id":"stimulus-specific-responding-complex","dir":"Articles","previous_headings":"Using calmr in R > Plotting","what":"stimulus-specific responding (complex)","title":"calmr_basics","text":"complex plots. , parsing changes little bit, order allow comparison among sources responding. Now, stimulus source shown different color, vertical panels show different target stimuli.","code":"plot(my_sim, type = \"rs\", simple = F) #> $Control #>  #> $Exp"},{"path":"http://victornavarro.org/calmr/articles/calmr_basics.html","id":"stimulus-activations","dir":"Articles","previous_headings":"Using calmr in R > Plotting","what":"stimulus activations","title":"calmr_basics","text":"Similar , now x-axis shows trial number, trial_types embedded across horizontal panels.","code":"plot(my_sim, type = \"acts\") #> $Control #>  #> $Exp"},{"path":"http://victornavarro.org/calmr/articles/calmr_basics.html","id":"stimulus-associations","dir":"Articles","previous_headings":"Using calmr in R > Plotting","what":"stimulus associations","title":"calmr_basics","text":"Going even deeper now. stimulus-stimulus associations HeiDI uses generate activations first place. vertical panel denotes stimulus source. different colours, target association.","code":"plot(my_sim, type = \"vs\") #> $Control #>  #> $Exp"},{"path":"http://victornavarro.org/calmr/articles/calmr_basics.html","id":"stimulus-salience-at-expression","dir":"Articles","previous_headings":"Using calmr in R > Plotting","what":"stimulus salience at expression","title":"calmr_basics","text":"Venture ’re ready. plots show stimulus saliencies moment expression.","code":"plot(my_sim, type = \"as\") #> $Control #>  #> $Exp"},{"path":"http://victornavarro.org/calmr/articles/calmr_basics.html","id":"graphing","dir":"Articles","previous_headings":"Using calmr in R","what":"Graphing","title":"calmr_basics","text":"can also take look state model’s associations point training, using function make_graphs.","code":"my_graph_opts <- get_graph_opts(\"small\") graph(my_sim, t = 10, graph_opts = my_graph_opts) #> $Control #>  #> $Exp"},{"path":"http://victornavarro.org/calmr/articles/calmr_basics.html","id":"final-thoughts","dir":"Articles","previous_headings":"Using calmr in R","what":"Final thoughts","title":"calmr_basics","text":"calmr package designed simulate quickly; write design get glance model predictions. However, package also features advanced users, make sure check advanced vignettes ready.","code":""},{"path":"http://victornavarro.org/calmr/articles/calmr_fits.html","id":"fitting-heidi-to-empirical-data","dir":"Articles","previous_headings":"","what":"Fitting HeiDI to empirical data","title":"calmr_fits","text":"now fit model empirical data (Patitucci et al., 2016, Experiment 1). involve writing function produces model responses organized empirical data, using function maximum likelihood estimation (MLE). begin short overview data, move model function, finally fit model.","code":""},{"path":"http://victornavarro.org/calmr/articles/calmr_fits.html","id":"the-data","dir":"Articles","previous_headings":"Fitting HeiDI to empirical data","what":"The data","title":"calmr_fits","text":"data (pati) contains responses (lever presses lp, nose pokes np) 32 subjects (rats) across 6 blocks training (2 sessions per block). animals trained associate two levers one two unconditioned stimuli (pellets sucrose). Let’s take look .  thicker lines group averages; rest individual subjects. ignore specific mapping levers USs , counterbalanced across subjects. However, counterbalancing end relevant (see ahead).","code":"glimpse(pati) #> Rows: 768 #> Columns: 6 #> $ subject  <fct> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… #> $ block    <dbl> 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3… #> $ lever    <fct> L, L, L, L, L, L, R, R, R, R, R, R, L, L, L, L, L, L, R, R, R… #> $ us       <chr> \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"S\", \"S\", \"S\", \"S\", \"S\", \"S\", \"… #> $ response <fct> lp, lp, lp, lp, lp, lp, lp, lp, lp, lp, lp, lp, np, np, np, n… #> $ rpert    <dbl> 0.9000, 1.5500, 3.3500, 4.1500, 4.6500, 4.3250, 0.4000, 0.162… pati  %>% ggplot(aes(x = block, y = rpert, colour = us)) +   geom_line(aes(group = interaction(us, subject)), alpha = .3) +   stat_summary(geom = 'line', fun = 'mean', size = 1) +   labs(x = \"Block\", y = \"Responses per trial\", colour = \"US\") +   facet_grid(~response)"},{"path":"http://victornavarro.org/calmr/articles/calmr_fits.html","id":"writing-the-model-function","dir":"Articles","previous_headings":"Fitting HeiDI to empirical data","what":"Writing the model function","title":"calmr_fits","text":"biggest hurdle fitting model empirical data write function , given vector parameters model arguments, generates responses organized empirical data. Let’s begin summarizing group data first, know aim . now prepare arguments model function (pass run_model). achieve , use make_model_args, function requires three bits: 1) design data.frame, 2) table parameters, 3) list simulation options. Note arguments fixed optimization process, means training routine within iteration numerical optimization always . minor issue, HeiDI sensitive order effects. Hence, important arguments prepare reflect behavior model “general” experimental procedure, quirks unfortunate run tials. , simply address issue running several iterations model (random trial orders) average models evaluating likelihood parameters. design? experiment presented Patittuci et al. (2016) fairly simple, can reduced presentations two levers, followed different appetitive outcome. , assume two outcomes independent . also take liberties number trials specify order reduce computing time. Note specified two counterbalancings groups. important reproduce counterbalancings data trying fit close possible. Otherwise, optimization process might latch onto experimentally-irrelevant variables. example, can seen pati lever pressing whenever lever paired pellets. didn’t counterbalance identities levers USs, optimization might result one levers less salient . can now begin write model function. First, good idea see run_model returns run arguments . Although run_model function returns S4 class many things, care one : mod_res@parsed_results$rs (model responses). hand, can write model function. Let’s dissect function three parts. manipulation vector parameters, naming according stimulus names identified arguments (names(model_args$alphas[[1]])). function use simulate (.e., one called run_model) requires named vector work, optimizers (looking optim) strip names numerical vectors trying optimize. run model immediately select relevant information (rs). Finally, summarise model responses, taking care different counterbalancings process. Within step, also filter output nodes related expecting one USs (latest public version model lagging behind latest theoretical developments), classify responses nosepokes (produced US) lever presses (produced levers), calculate mean across blocks trials. Let’s see function action. order empirical data model responses must match. emphasize point enough: nothing within fit function checks reorders data . sole responsible making sure pieces data order. simple way print model results return (see ). made sure everything looking good, can fit model.","code":"pati_summ <- pati %>%    group_by(block, us, response) %>%   summarise(rpert = mean(rpert), .groups = \"drop\") head(pati_summ) #> # A tibble: 6 × 4 #>   block us    response rpert #>   <dbl> <chr> <fct>    <dbl> #> 1     1 P     lp       0.820 #> 2     1 P     np       3.41  #> 3     1 S     lp       0.561 #> 4     1 S     np       3.28  #> 5     2 P     lp       1.57  #> 6     2 P     np       3.51 #The design data.frame des_df <- data.frame(group = c(\"CB1\", \"CB2\"),                      training = c(\"12L>(Pellet)/12R>(Sucrose)\", \"12L>(Sucrose)/12R>(Pellet)\"),                      rand_train = T) #The parameters pars <- get_model_params(des_df, model = \"HD2022\") #the actual parameter values don't matter, as our function will re-write them inside the optimizer call #The options opts <- get_exp_opts(iterations = 4) #The arguments my_mod_args <- make_model_args(design = parse_design(des_df), pars = pars, model = \"HD2022\", opts = opts) mod_res <- run_model(args = my_mod_args) str(mod_res@parsed_results, max.level = 2) #> List of 4 #>  $ vs  : tibble [1,056 × 8] (S3: tbl_df/tbl/data.frame) #>  $ rs  : tibble [1,408 × 8] (S3: tbl_df/tbl/data.frame) #>  $ as  : tibble [352 × 7] (S3: tbl_df/tbl/data.frame) #>  $ acts: tibble [352 × 8] (S3: tbl_df/tbl/data.frame) my_model_function <- function(pars, model_args){   #manipulating pars   names(pars) = names(model_args$alphas[[1]])   model_args$alphas = list(pars)   #running the model and selecting rs   mod_res = run_model(args = model_args)@parsed_results$rs   #summarizing the model   mod_res = mod_res %>%     filter(s2 %in% c(\"Pellet\", \"Sucrose\")) %>%     mutate(response = ifelse(s1 %in% c(\"Pellet\", \"Sucrose\"), \"np\", \"lp\"),            block = ceiling(trial/4)) %>%     rowwise() %>%     #note this filter below; we do not allow lever presses if the lever was not presented on the trial     filter(response == \"np\" | (response == \"lp\" & grepl(s1, trial_type))) %>%     mutate(us = ifelse(grepl(\"Pellet\", trial_type), \"P\", \"S\")) %>%     group_by(block, us, response) %>%     summarise(value = mean(value), .groups = \"drop\")   #print(mod_res)   mod_res$value } my_model_function(c(.1, .2, .4, .3), model_args = my_mod_args) #>  [1] 0.011428571 0.002285714 0.009086538 0.001362981 0.038843875 0.017203182 #>  [7] 0.032357846 0.010771163 0.051407435 0.033924176 0.040160990 0.020330205 #> [13] 0.056681369 0.046570589 0.045429885 0.029039503 0.054260267 0.053247701 #> [19] 0.053023859 0.037343391 0.055989939 0.060631103 0.055036916 0.042556665"},{"path":"http://victornavarro.org/calmr/articles/calmr_fits.html","id":"fitting-the-model","dir":"Articles","previous_headings":"Fitting HeiDI to empirical data","what":"Fitting the model","title":"calmr_fits","text":"fit models using fit_model function. function requires 4 arguments: (empirical) data model function arguments run model function. optimizer options. done great job taking care first three, let’s tackle last. get_optimizer_opts function returns many things: model_pars: name model parameters. , name alphas stimuli. ll ul: lower upper limits parameter search. Consider shrinking speed process. optimizer: numerical optimization technique wish use MLE estimation. family: family distribution assume model. practice, request used determine link function transform model responses, likelihood function used objective function. normal family nothing fancy model responses, estimate extra parameter, scale, scales model responses (roughly) scale empirical data. comes likelihood functions, family use normal density data model differences. family_pars: family-specific parameter estimated alongside salience parameters. verbose: Whether print parameters objective function values optimize. free modify ; just make sure structure list returned get_optimizer_opts remains . can also pass extra parameters optimizer call using (e.g., par argument optim, parallel ga). , fit model parallel ga, 10 iterations. , can fit model! (patient following along) fit_model function returns lot information track put got . However, typing model console show MLE parameters obtained time negative log likelihood, given data: ’s good , well model run parameters “visually” fit data? can obtain predictions model via predict function.  looks pretty good! Save blatant misfits, course. Now know everything need fit calmr empirical data. Go forth!","code":"my_optimizer_opts <- get_optimizer_opts(model_pars = pars$stimulus,                                         optimizer = \"ga\",                                         ll = c(0, 0, 0, 0),                                         ul = c(1, 1, 1, 1),                                         family = \"normal\") my_optimizer_opts #> $model_pars #> [1] \"L\"       \"R\"       \"Pellet\"  \"Sucrose\" #>  #> $optimizer #> [1] \"ga\" #>  #> $family #> [1] \"normal\" #>  #> $family_pars #> [1] \"normal_scale\" #>  #> $all_pars #> [1] \"L\"            \"R\"            \"Pellet\"       \"Sucrose\"      \"normal_scale\" #>  #> $initial_pars #> [1] NA NA NA NA #>  #> $ll #>            L            R       Pellet      Sucrose normal_scale  #>            0            0            0            0            0  #>  #> $ul #>            L            R       Pellet      Sucrose normal_scale  #>            1            1            1            1          100  #>  #> $verbose #> [1] FALSE the_fit <- fit_model(pati_summ$rpert,                      model_function = my_model_function, model_args = my_mod_args,                      optimizer_options = my_optimizer_opts,                      maxiter = 10,                      parallel = T) the_fit #> Calmr model fit:  #>   Parameters:  #>            L            R       Pellet      Sucrose normal_scale  #>    0.3393293    0.2059405    0.4570155    0.8230219   22.2735919  #>  #>  nLogLik:  #>  50.28647 pati_summ$prediction = predict(the_fit, model_args = my_mod_args)  pati_summ %>% rename(\"data\" = \"rpert\") %>%     pivot_longer(cols = c(\"prediction\", \"data\"),                         names_to = \"type\",                         values_to = \"value\") %>%     ggplot(ggplot2::aes(x = block, y = value, colour = us, linetype = type)) +     geom_line() +     theme_bw() +      facet_grid(us~response)"},{"path":"http://victornavarro.org/calmr/articles/calmr_fits.html","id":"a-final-note","dir":"Articles","previous_headings":"Fitting HeiDI to empirical data > Fitting the model","what":"A final note","title":"calmr_fits","text":"vignette pre-generated, don’t want user fit model time installation. try keep package develops, spot inconsistencies, please drop line.","code":""},{"path":"http://victornavarro.org/calmr/articles/heidi_math.html","id":"the-mathematics-behind-heidi","dir":"Articles","previous_headings":"","what":"The mathematics behind HeiDI","title":"heidi_math","text":"HeiDI model four major components: 1) acquisition reciprocal associations stimuli, 2) pooling associations stimulus activations, 3) distribution activations stimulus-specific response units, 4) generation responses.","code":""},{"path":"http://victornavarro.org/calmr/articles/heidi_math.html","id":"acquiring-reciprocal-associations","dir":"Articles","previous_headings":"The mathematics behind HeiDI","what":"1 - Acquiring reciprocal associations","title":"heidi_math","text":"Whenever trial given, HeiDI learns associations among stimuli. association two stimuli, \\(\\) \\(j\\) denoted via \\(v_{,j}\\). association \\(v_{,j}\\) represents directional expectation: expectation \\(j\\) presented \\(\\). Furthermore, value represents nature effect \\(\\) representation \\(j\\). positive, presentation \\(\\) “excites” representation \\(j\\). negative, presentation \\(\\) “inhibits” representation \\(j\\). HeiDI learns “forward” associations stimuli, also reciprocal, “backward” associations. Thus, organisms presented \\(\\rightarrow j\\), organisms learn \\(v_{,j}\\), also \\(v_{j, }\\), expectation receiving \\(\\) presented \\(j\\). Note , sake brevity, learning equations specified forward associations.","code":""},{"path":"http://victornavarro.org/calmr/articles/heidi_math.html","id":"the-stimulus-expectation-rule","dir":"Articles","previous_headings":"The mathematics behind HeiDI > 1 - Acquiring reciprocal associations","what":"1.1 - The stimulus expectation rule","title":"heidi_math","text":"HeiDI generates expectations stimuli. expectation stimulus \\(j\\) (\\(e_j\\)) expressed \\[ \\tag{Eq. 1} e_j  = \\sum_{k}^{K}x_kv_{k,j} \\] \\(K\\) set containing stimuli experiment, \\(x_k\\) quantity denoting presence absence stimulus \\(k\\) (1 0, respectively)1.","code":""},{"path":"http://victornavarro.org/calmr/articles/heidi_math.html","id":"learning-rule","dir":"Articles","previous_headings":"The mathematics behind HeiDI > 1 - Acquiring reciprocal associations","what":"1.2 - Learning rule","title":"heidi_math","text":"HeiDI learns appropriate expectations via error-correction mechanisms. trial \\(t\\), association stimuli \\(\\) \\(j\\) expressed \\[ \\tag{Eq. 2} v_{,j, t} = v_{,j, t-1} + \\Delta v_{,j, t} \\] \\(v_{j,, t-1}\\) forward association \\(\\) \\(j\\) trial \\(t-1\\), \\(\\Delta v_{,j, t}\\) change association result trial \\(t\\). delta term uses pooled error term expressed \\[ \\tag{Eq. 3} \\Delta v_{,j} = x_i\\alpha_i(x_jc\\alpha_j - e_j) \\] \\(\\alpha_i\\) \\(\\alpha_j\\) parameters representing salience stimuli \\(\\) \\(j\\), respectively (\\(0 \\le \\alpha \\le 1\\)), \\(c\\) scaling constant (\\(c = 1\\)). Note term denoting trial, \\(t\\) omitted simplicity.","code":""},{"path":"http://victornavarro.org/calmr/articles/heidi_math.html","id":"pooling-the-strength-of-associations","dir":"Articles","previous_headings":"The mathematics behind HeiDI","what":"2 - Pooling the strength of associations","title":"heidi_math","text":"HeiDI pools stimulus associations activate stimulus-specific representations. activation representation stimulus \\(j\\), \\(a_j\\), defined : \\[ \\tag{Eq. 4} a_{j,M} = o_{j,M} + h_{j,M} \\] \\(o_{j,M}\\) denotes combined associative strength towards stimulus \\(j\\) presence stimuli \\(M\\), \\(h_{j,M}\\) denotes chained associative strength towards stimulus \\(j\\) presence stimuli \\(M\\).","code":""},{"path":"http://victornavarro.org/calmr/articles/heidi_math.html","id":"combined-associative-strength","dir":"Articles","previous_headings":"The mathematics behind HeiDI > 2 - Pooling the strength of associations","what":"2.1 - Combined associative strength","title":"heidi_math","text":"quantity \\(o_{j,M}\\) result combining associative strength forwards backwards associations stimulus \\(j\\) \\[ \\tag{Eq. 5} o_{j,M} = \\sum_{m \\neq j}^{M}v_{m,j} + \\left(\\frac{\\sum_{m \\neq j}^{M}v_{m,j} \\sum_{m \\neq j}^{M}v_{j,m}}{c}\\right) \\] sums run stimuli \\(M\\) presented trial, also different stimulus \\(j\\).2 left hand term describes forward associations stimuli \\(M\\) \\(j\\) affect representation \\(j\\), whereas right hand term describes backward associations \\(j\\) stimuli \\(M\\) affect representation (although modulated forward associations ).","code":""},{"path":"http://victornavarro.org/calmr/articles/heidi_math.html","id":"chained-associative-strength","dir":"Articles","previous_headings":"The mathematics behind HeiDI > 2 - Pooling the strength of associations","what":"2.2 - Chained associative strength","title":"heidi_math","text":"quantity \\(h_{j,M}\\) captures indirect associative strength stimuli \\(M\\) \\(j\\), via absent stimuli. , \\(h_{j,M}\\) defined \\[ \\tag{Eq. 6a} h_{j,M} = \\sum_{m \\neq j}^{M} \\sum_{n}^{N}\\frac{v_{m,n}o_{j,n}}{c} \\] N stimuli presented trial (.e., K-M). Note re-use \\(o\\), quantity defined Eq. 5. equation allows absent stimuli \\(N\\) influence representation stimulus \\(j\\), long association present stimuli \\(M\\). Honey Dwyer (2022), authors specify similarity-based mechanism modulates effect associative chains according similarity salience nominal retrieved stimuli. , Eq. 6a expanded : \\[ \\tag{Eq. 6b} h_{j,M} = \\sum_{m \\neq j}^{M} \\sum_{n}^{N}S(\\alpha_{n}, \\alpha'_n)\\frac{v_{m,n}o_{j,n}}{c} \\] \\(S\\) similarity function takes nominal salience stimulus n, \\(\\alpha_n\\) (perceived \\(n\\) actually presented trial) retrieved salience, \\(\\alpha'_n\\) (perceived \\(n\\) retrieved via stimuli M, see ahead). function defined : \\[ \\tag{Eq. 7} S(\\alpha_n, \\alpha'_n) = \\frac{\\alpha_n}{\\alpha_n + |\\alpha_n-\\alpha'_n|} \\times \\frac{\\alpha'_n}{\\alpha'_n+ |\\alpha_n-\\alpha'_n|} \\] Notably, whenever one nominal salience given stimulus, \\(\\alpha_n\\) arithmetic mean among nominal values (see “heidi_similarity” vignette).","code":""},{"path":"http://victornavarro.org/calmr/articles/heidi_math.html","id":"distributing-strength-into-stimulus-specific-response-units","dir":"Articles","previous_headings":"The mathematics behind HeiDI","what":"3 - Distributing strength into stimulus-specific response units","title":"heidi_math","text":"HeiDI distributes pooled stimulus-specific strength among \\(K\\) stimuli, according relative salience. activation response unit \\(j\\), \\(R_j\\) expressed \\[ \\tag{Eq. 8} R_{j,k} = \\frac{\\theta(j)}{\\sum_{k}^{K}\\theta(k)}a_{k,M} \\] \\(j \\K\\). \\(K\\) can include present absent stimuli, \\(\\theta\\) function depends whether stimulus \\(k\\) absent (.e., \\(k \\N\\)) (.e., \\(k \\M\\)), : \\[ \\tag{Eq. 9} \\theta(k) = \\begin{cases}     \\left |\\sum_{m}^{M}\\left( v_{m,k}+\\sum_{n \\neq k}^{N}\\frac{v_{m,n}v_{n,k}}{c}\\right) \\right|,& \\text{} k \\N\\\\     \\alpha_k, & \\text{otherwise} \\end{cases} \\] Note quantity absent stimuli absolute, order prevent negative \\(\\theta\\) values due inhibitory associations3. Also note summation term used left-hand side expression absent stimulus. implies present stimuli \\(M\\) contribute salience stimulus \\(k\\). Finally, note right side expression present stimuli contribute via direct association \\(k\\), \\(v_{m,k}\\), also associative chains absent stimuli (c.f., Eq. 6a).","code":""},{"path":"http://victornavarro.org/calmr/articles/heidi_math.html","id":"generating-responses","dir":"Articles","previous_headings":"The mathematics behind HeiDI","what":"4 - Generating responses","title":"heidi_math","text":"Finally, HeiDI responds. response-generating mechanisms HeiDI currently underspecified. current version, HeiDI’s responses product activation stimulus-specific response units connection units specific motor units. , activation motor unit \\(q\\), \\(r_q\\), given \\[ \\tag{Eq. 10} r_q = R_jw_{j,q} \\] \\(w_{j,q}\\) weight representing association stimulus-specific unit \\(j\\) motor unit \\(q\\).","code":""},{"path":"http://victornavarro.org/calmr/articles/heidi_similarity.html","id":"simulating-similarity-effects","dir":"Articles","previous_headings":"","what":"Simulating similarity effects","title":"heidi_similarity","text":"Honey Dwyer (2022), authors propose similarity retrieved nominal saliencies stimulus representations modulates quantities combination rule. Retrieved saliencies exclusively absent stimuli, result existing associations stimuli (see Eq. 8 math vignette). contrast, nominal saliencies denote intensity stimulus representations stimuli actually presented trial (\\(\\alpha\\)). intuitive example effect saliency similarity responding refers effect weakly retrieved representations behavior. low similarity weakly retrieved representation nominal representation result reduced effect former behavior. example, typical Pavlovian inhibition paradigm [(US)/AX], inhibitor (e.g., X) strong effect behavior actually presented weak effect behavior weakly retrieved stimulus strong association (e.g., ). Yet, inspiration proposing general rule fairly specific. attempt explain introduction delay CS US stimuli higher-order conditioning experiments sometimes enhance responding stimulus never paired US (e.g., AX/X(US) X(US)/AX).","code":""},{"path":"http://victornavarro.org/calmr/articles/heidi_similarity.html","id":"reproducing-the-simulation-presented-in-the-paper","dir":"Articles","previous_headings":"Simulating similarity effects","what":"Reproducing the simulation presented in the paper","title":"heidi_similarity","text":"paper, authors plot similarity retrieved saliencies nominal saliencies stimulus X sensory preconditioning experiment short delay X US used (group Reduced) (group ). effect introducing delay simulated X saliency .36; otherwise, saliency .40. saliencies US fixed .30 .50, respectively, conditions.","code":"df <- data.frame(Group = c(\"Same\", \"Reduced\"),                  P1 = c(\"10A(X_a)\", \"10A(X_a)\"),                  R1 = c(FALSE, FALSE),                  P2 = c(\"10(X_a)(US)\", \"10(X_b)(US)\"),                  R2 = c(FALSE, FALSE)) params <- data.frame(stimulus = c(\"A\", \"X_a\", \"X_b\", \"US\"),                      alphas = c(.30, .40, .36, .50)) model <- run_experiment(design = df, model = \"HD2022\", param_df = params, options = )"},{"path":"http://victornavarro.org/calmr/articles/heidi_similarity.html","id":"plotting-the-similarity-between-saliencies","dir":"Articles","previous_headings":"Simulating similarity effects > Reproducing the simulation presented in the paper","what":"Plotting the similarity between saliencies","title":"heidi_similarity","text":"plot currently supported package, can easily generated passing \\(\\rightarrow X\\) association one alphas internal function used calculate similarity calmr:::.alphaSim.  Note simulator save state weights trial 1. ’s plot start similarity 0, shown paper.","code":"model@parsed_results$vs %>% filter(s1 == \"A\" & s2 == \"X\" & phase == \"P1\") %>% #using only the first phase   mutate(nominal_alpha = ifelse(group == 'Reduced', mean(.36, .40), .40)) %>%   mutate(similarity = calmr:::.alphaSim(value, nominal_alpha)) %>%   ggplot(aes(x = trial, y = similarity, linetype = group)) +    geom_line() + theme_bw() +    labs(x = \"Trial\", y = \"Similarity\", linetype = \"Group\")"},{"path":"http://victornavarro.org/calmr/articles/heidi_similarity.html","id":"plotting-the-distribution-of-responding","dir":"Articles","previous_headings":"Simulating similarity effects > Reproducing the simulation presented in the paper","what":"Plotting the distribution of responding","title":"heidi_similarity","text":"one little bit trickier, figure manuscript effectively contains many experiments varying number XA trials starting first-order conditioning phase. address , run multiple simulations different experimental designs. Run model. now can manually plot distribution responding among stimuli model$rs.","code":"ntrials <- 1:10 df <- data.frame(Group = c(paste0(\"S\", ntrials), paste0(\"R\", ntrials)),                  P1 = rep(paste0(ntrials, \"A(X_a)\"), 2),                  R1 = FALSE,                  P2 = rep(c(\"10(X_a)>(US)\", \"10(X_b)>(US)\"), each = 10),                  R2 = FALSE,                  P3 = \"A#\",                  R3 = FALSE) params <- data.frame(stimulus = c(\"A\", \"X_a\", \"X_b\", \"US\"),                      alphas = c(.30, .40, .36, .50)) head(df) #>   Group      P1    R1           P2    R2 P3    R3 #> 1    S1 1A(X_a) FALSE 10(X_a)>(US) FALSE A# FALSE #> 2    S2 2A(X_a) FALSE 10(X_a)>(US) FALSE A# FALSE #> 3    S3 3A(X_a) FALSE 10(X_a)>(US) FALSE A# FALSE #> 4    S4 4A(X_a) FALSE 10(X_a)>(US) FALSE A# FALSE #> 5    S5 5A(X_a) FALSE 10(X_a)>(US) FALSE A# FALSE #> 6    S6 6A(X_a) FALSE 10(X_a)>(US) FALSE A# FALSE model <- run_experiment(design = df, model = \"HD2022\", param_df = params, options = get_exp_opts()) model@parsed_results$rs %>%    filter(phase == 'P3' & s2 == \"US\") %>%   mutate(trial = trial-11,           group_lab = ifelse(substr(group, 1, 1) == \"R\", \"Reduced\", \"Same\")) %>%   ggplot(aes(x = trial, y = value, colour = s1, linetype = group_lab)) +    geom_line() +    theme_bw() +    labs(x = \"Trial\", y = \"R-value\", colour = \"stimulus\", linetype = \"Group\") +    facet_wrap(~s2)"},{"path":"http://victornavarro.org/calmr/articles/heidi_similarity.html","id":"some-final-notes","dir":"Articles","previous_headings":"Simulating similarity effects > Reproducing the simulation presented in the paper","what":"Some final notes","title":"heidi_similarity","text":"paper, Honey Dwyer completely specify rules choosing reference value similarity calculation whenever one nominal stimulus experienced. example, simulation use two nominal versions X stimulus (X_a X_b), , whenever model compute similarity retrieved (.e., \\(\\rightarrow X\\)) conditioned saliency values, encounter problem choose among least two conditioned values (X_a X_b). Although authors paper chose saliency nominal X conditioned US (.e., X_b), specify choice made , less intuitive situations. way avoid solving issue, current implementation similarity rule uses average nominal stimuli reference value similarity calculation. specific simulation case, implementation actually reduces effect similarity distribution responding.","code":""},{"path":"http://victornavarro.org/calmr/articles/mac1975_math.html","id":"the-mathematics-behind-mac1975","dir":"Articles","previous_headings":"","what":"The mathematics behind MAC1975","title":"MAC1975_math","text":"grand departure global error term models RW1972 (Rescorla & Wagner, 1972), MAC1975 model (Mackintosh, 1975) uses local error terms, changes stimulus associability (\\(\\alpha\\)) via error comparison mechanism promotes learning uncertain stimuli:","code":""},{"path":"http://victornavarro.org/calmr/articles/mac1975_math.html","id":"generating-expectations","dir":"Articles","previous_headings":"The mathematics behind MAC1975","what":"1 - Generating expectations","title":"MAC1975_math","text":"Let \\(v_{k,j}\\) denote associative strength stimulus \\(k\\) stimulus \\(j\\). given trial, expectation stimulus \\(j\\), \\(e_j\\), given : \\[ \\tag{Eq.1} e_j = \\sum_{k}^{K}x_k v_{k,j} \\] \\(x_k\\) denotes presence (1) absence (0) stimulus \\(k\\), set \\(K\\) represents stimuli design.","code":""},{"path":"http://victornavarro.org/calmr/articles/mac1975_math.html","id":"learning-associations","dir":"Articles","previous_headings":"The mathematics behind MAC1975","what":"2 - Learning associations","title":"MAC1975_math","text":"Changes association stimulus \\(\\) \\(j\\), \\(v_{,j}\\), given : \\[ \\tag{Eq.2} \\Delta v_{,j} = x_i \\alpha_i \\beta_j (\\lambda_j - v_{,j}) \\] \\(\\alpha_i\\) associability (attention devoted ) stimulus \\(\\), \\(\\beta_j\\) learning rate parameter determined properties \\(j\\), \\(\\lambda_j\\) maximum association strength supported \\(j\\) (asymptote).","code":""},{"path":"http://victornavarro.org/calmr/articles/mac1975_math.html","id":"learning-to-attend","dir":"Articles","previous_headings":"The mathematics behind MAC1975","what":"3 - Learning to attend","title":"MAC1975_math","text":"parameter \\(\\alpha_i\\) changes function learning, proportionally difference absolute errors conveyed \\(\\) predictors1, via: \\[ \\tag{Eq.3} \\Delta \\alpha_{} = x_i\\theta_i \\sum_{j}^{K}\\gamma_j(|\\lambda_j - \\sum_{k \\ne }^{K}v_{k,j}|-|\\lambda_j -  v_{,j}|) \\] \\(\\theta_i\\) attentional learning rate parameter stimulus \\(\\) (usually fixed across stimuli). Although Mackintosh (1975) extend model account predictive power within-compound associations, implementation model package . can sometimes result unexpected behaviour, , Eq. 3 includes extra parameter \\(\\gamma_j\\) (defaulting 1/K) denotes whether expectation stimulus \\(j\\) contributes attentional learning. , user can set parameters manually order reflect contribution different experimental stimuli. example, simple “AB>(US)” design, setting \\(\\gamma_{US}\\) = 1 \\(\\gamma_{} = \\gamma_{B} = 0\\) leads behaviour original model.","code":""},{"path":"http://victornavarro.org/calmr/articles/mac1975_math.html","id":"generating-responses","dir":"Articles","previous_headings":"The mathematics behind MAC1975","what":"4 - Generating responses","title":"MAC1975_math","text":"specification response-generating mechanisms MAC1975. However, simplest response function can adopted identity function stimulus expectations. , responses reflecting nature \\(j\\), \\(r_j\\), given : \\[ \\tag{Eq.4} r_j = e_j \\]","code":""},{"path":[]},{"path":"http://victornavarro.org/calmr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Victor Navarro. Author, maintainer.","code":""},{"path":"http://victornavarro.org/calmr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Navarro V (2023). calmr: Canonical associative learning models R. https://github.com/victor-navarro/calmr, http://victornavarro.org/calmr/.","code":"@Manual{,   title = {calmr: Canonical associative learning models in R},   author = {Victor Navarro},   year = {2023},   note = {https://github.com/victor-navarro/calmr, http://victornavarro.org/calmr/}, }"},{"path":"http://victornavarro.org/calmr/index.html","id":"calmr","dir":"","previous_headings":"","what":"Canonical associative learning models in R","title":"Canonical associative learning models in R","text":"Canonical Associative Learning Models R","code":""},{"path":"http://victornavarro.org/calmr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Canonical associative learning models in R","text":"need devtools install package github. , run: install.packages(\"devtools\") Afterwards, can install directly repository via: devtools::install_github(\"victor-navarro/calmr\", build_vignettes = TRUE) managed build vignettes, ’s vignette showing basics package vignette(\"calmr_basics\", package = \"calmr\") just want quick simulating, launch visual interface via:","code":"library(calmr) calmr_app()"},{"path":"http://victornavarro.org/calmr/index.html","id":"try-the-online-shiny-app","dir":"","previous_headings":"","what":"Try the online Shiny app","title":"Canonical associative learning models in R","text":"want check app without committing install, can check (wary: server might run free monthly quota). https://victor-navarro.shinyapps.io/calmr_app/","code":""},{"path":"http://victornavarro.org/calmr/reference/AIC-CalmrFit-method.html","id":null,"dir":"Reference","previous_headings":"","what":"AIC of CalmrFit — AIC,CalmrFit-method","title":"AIC of CalmrFit — AIC,CalmrFit-method","text":"Returns Akaike Information Criterion model fit via calmr::fit_model","code":""},{"path":"http://victornavarro.org/calmr/reference/AIC-CalmrFit-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AIC of CalmrFit — AIC,CalmrFit-method","text":"","code":"# S4 method for CalmrFit AIC(object, ..., k = 2)"},{"path":"http://victornavarro.org/calmr/reference/AIC-CalmrFit-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AIC of CalmrFit — AIC,CalmrFit-method","text":"object object class CalmrFit-class. ... Unused k Numeric. Penalty term (default = 2)","code":""},{"path":"http://victornavarro.org/calmr/reference/AIC-CalmrFit-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AIC of CalmrFit — AIC,CalmrFit-method","text":"numeric","code":""},{"path":"http://victornavarro.org/calmr/reference/AIC-CalmrFit-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"AIC of CalmrFit — AIC,CalmrFit-method","text":"AIC defined 2*k - 2*-NLL, k penalty term NLL negative log likelihood model.","code":""},{"path":"http://victornavarro.org/calmr/reference/BIC-CalmrFit-method.html","id":null,"dir":"Reference","previous_headings":"","what":"BIC of CalmrFit — BIC,CalmrFit-method","title":"BIC of CalmrFit — BIC,CalmrFit-method","text":"Returns Bayesian Information Criterion model fit via calmr::fit_model","code":""},{"path":"http://victornavarro.org/calmr/reference/BIC-CalmrFit-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BIC of CalmrFit — BIC,CalmrFit-method","text":"","code":"# S4 method for CalmrFit BIC(object, ...)"},{"path":"http://victornavarro.org/calmr/reference/BIC-CalmrFit-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BIC of CalmrFit — BIC,CalmrFit-method","text":"object object class CalmrFit-class. ... Unused","code":""},{"path":"http://victornavarro.org/calmr/reference/BIC-CalmrFit-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"BIC of CalmrFit — BIC,CalmrFit-method","text":"numeric","code":""},{"path":"http://victornavarro.org/calmr/reference/BIC-CalmrFit-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"BIC of CalmrFit — BIC,CalmrFit-method","text":"AIC defined k*log(n) - 2*-NLL, k number parameters model n number observations","code":""},{"path":"http://victornavarro.org/calmr/reference/CalmrComparison-class.html","id":null,"dir":"Reference","previous_headings":"","what":"S4 class for Calmr Comparisons — CalmrComparison-class","title":"S4 class for Calmr Comparisons — CalmrComparison-class","text":"S4 class Calmr Comparisons","code":""},{"path":"http://victornavarro.org/calmr/reference/CalmrComparison-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"S4 class for Calmr Comparisons — CalmrComparison-class","text":"results: Data.frame. unparsed model results models: Character vector. models compared layers: Character vector. layers compared model_layer_names: Character vector. Combination two ","code":""},{"path":"http://victornavarro.org/calmr/reference/CalmrExperiment-class.html","id":null,"dir":"Reference","previous_headings":"","what":"S4 class for Calmr Experiments — CalmrExperiment-class","title":"S4 class for Calmr Experiments — CalmrExperiment-class","text":"S4 class Calmr Experiments","code":""},{"path":"http://victornavarro.org/calmr/reference/CalmrExperiment-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"S4 class for Calmr Experiments — CalmrExperiment-class","text":"results: Data.frame. unparsed model results parsed_results: List. parsed aggregated model results is_parsed: Logical. Whether model results parsed","code":""},{"path":"http://victornavarro.org/calmr/reference/CalmrFit-class.html","id":null,"dir":"Reference","previous_headings":"","what":"S4 class for Calmr Fit — CalmrFit-class","title":"S4 class for Calmr Fit — CalmrFit-class","text":"S4 class Calmr Fit","code":""},{"path":"http://victornavarro.org/calmr/reference/CalmrFit-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"S4 class for Calmr Fit — CalmrFit-class","text":"nloglik: Numeric. Negative log likelihood fit best_pars: Numeric. Best fitting parameters model_pars: Numeric. Parameters used model function link_pars: Numeric. Parameters used link function data: Numeric. Data used fit model_function: Function. Model function link_function: Function. Link function ll_function: Function. Objective function (usually nloglikelihood) optimizer_options: List. Options used optimizer extra_pars: List. Extra parameters passed fit call (...)","code":""},{"path":"http://victornavarro.org/calmr/reference/CalmrModel-class.html","id":null,"dir":"Reference","previous_headings":"","what":"S4 class for Calmr Models — CalmrModel-class","title":"S4 class for Calmr Models — CalmrModel-class","text":"S4 class Calmr Models","code":""},{"path":"http://victornavarro.org/calmr/reference/CalmrModel-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"S4 class for Calmr Models — CalmrModel-class","text":"model: Character. model name. parameters: List. model parameters. model_results : List. model results (layers) experience: Data.frame. data.frame used train model. mapping: List. Contains mapping information (e.g., functional nominal stimuli) is_parsed: Logical. Whether model results parsed.","code":""},{"path":"http://victornavarro.org/calmr/reference/CalmrRSA-class.html","id":null,"dir":"Reference","previous_headings":"","what":"S4 class for Calmr RSA — CalmrRSA-class","title":"S4 class for Calmr RSA — CalmrRSA-class","text":"S4 class Calmr RSA","code":""},{"path":"http://victornavarro.org/calmr/reference/CalmrRSA-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"S4 class for Calmr RSA — CalmrRSA-class","text":"corr_mat: Array. Correlation matrix distance_mats: List. Distance matrices trials: Character. Trial option used calculate distance mats dist_method: Character vector. Method calculate distances corr_method: Character vector. Method calculate correlations","code":""},{"path":"http://victornavarro.org/calmr/reference/CalmrRSATest-class.html","id":null,"dir":"Reference","previous_headings":"","what":"S4 class for Calmr RSA Test — CalmrRSATest-class","title":"S4 class for Calmr RSA Test — CalmrRSATest-class","text":"S4 class Calmr RSA Test","code":""},{"path":"http://victornavarro.org/calmr/reference/CalmrRSATest-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"S4 class for Calmr RSA Test — CalmrRSATest-class","text":"RSA: Object class CalmrRSA sig_mat: Array. Correlation significance matrix lower_crit: Array. Lower bound significance upper_crit: Array. Upper bound significance n_samples: Numeric. Number bootstrap samples p: Numeric. Alpha level significance","code":""},{"path":"http://victornavarro.org/calmr/reference/HD2022.html","id":null,"dir":"Reference","previous_headings":"","what":"Train the HD2022 model — HD2022","title":"Train the HD2022 model — HD2022","text":"Train HD2022 model","code":""},{"path":"http://victornavarro.org/calmr/reference/HD2022.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train the HD2022 model — HD2022","text":"","code":"HD2022(alphas, V = NULL, experience, mapping)"},{"path":"http://victornavarro.org/calmr/reference/HD2022.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train the HD2022 model — HD2022","text":"alphas named vector stimulus saliences. V (optional) named matrix dimensions S,S; S number stimuli. experience data.frame specifying trials rows, returned make_model_args mapping named list specifying trial stimulus mapping, returned make_model_args","code":""},{"path":"http://victornavarro.org/calmr/reference/HD2022.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train the HD2022 model — HD2022","text":"list vs, rs - Arrays dimensions P,S,S; P number trials used train model S number stimuli involved experiment. Respectively, vs rs contain stimulus weights stimulus-specific responses. - Arrays dimensions P,1,S; P number trials used train model S number stimuli involved experiment. Respectively, vs rs contain stimulus weights stimulus-specific responses. combs, chains - Lists length P combined chained activation values. experience, mapping - passed arguments; carryover arguments processing.","code":""},{"path":"http://victornavarro.org/calmr/reference/HD2022.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Train the HD2022 model — HD2022","text":"array V contains associations stimuli involved experiment. Entry ,j specifies associative strength stimulus stimulus j. Entry j,specifies opposite direction.","code":""},{"path":"http://victornavarro.org/calmr/reference/HDI2020.html","id":null,"dir":"Reference","previous_headings":"","what":"Train the HDI2020 model — HDI2020","title":"Train the HDI2020 model — HDI2020","text":"Train HDI2020 model","code":""},{"path":"http://victornavarro.org/calmr/reference/HDI2020.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train the HDI2020 model — HDI2020","text":"","code":"HDI2020(alphas, V = NULL, experience, mapping)"},{"path":"http://victornavarro.org/calmr/reference/HDI2020.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train the HDI2020 model — HDI2020","text":"alphas named vector stimulus saliences. V (optional) named matrix dimensions S,S; S number stimuli. experience data.frame specifying trials rows, returned make_model_args mapping named list specifying trial stimulus mapping, returned make_model_args","code":""},{"path":"http://victornavarro.org/calmr/reference/HDI2020.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train the HDI2020 model — HDI2020","text":"list vs, rs - Arrays dimensions P,S,S; P number trials used train model S number stimuli involved experiment. Respectively, vs rs contain stimulus weights stimulus-specific responses. - Arrays dimensions P,1,S; P number trials used train model S number stimuli involved experiment. Respectively, vs rs contain stimulus weights stimulus-specific responses. combs, chains - Lists length P combined chained activation values. experience, mapping - passed arguments; carryover arguments processing.","code":""},{"path":"http://victornavarro.org/calmr/reference/HDI2020.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Train the HDI2020 model — HDI2020","text":"array V contains associations stimuli involved experiment. Entry ,j specifies associative strength stimulus stimulus j. Entry j,specifies opposite direction.","code":""},{"path":"http://victornavarro.org/calmr/reference/MAC1975.html","id":null,"dir":"Reference","previous_headings":"","what":"Train the MAC1975 model — MAC1975","title":"Train the MAC1975 model — MAC1975","text":"Train MAC1975 model","code":""},{"path":"http://victornavarro.org/calmr/reference/MAC1975.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train the MAC1975 model — MAC1975","text":"","code":"MAC1975(   alphas,   min_alphas,   max_alphas,   betas_on,   betas_off,   lambdas,   thetas,   gammas,   V = NULL,   experience,   mapping )"},{"path":"http://victornavarro.org/calmr/reference/MAC1975.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train the MAC1975 model — MAC1975","text":"alphas named vector stimulus saliences. min_alphas named vector minimum stimulus saliences. max_alphas named vector maximum stimulus saliences. betas_on named vector stimulus associabilities present stimuli. betas_off named vector stimulus associabilities absent stimuli. lambdas named vector stimulus asymptotes. thetas named vector stimulus attentional learning rates. gammas named vector stimulus contributions attentional learning rules V (optional) named matrix dimensions S,S; S number stimuli. experience data.frame specifying trials rows, returned make_model_args mapping named list specifying trial stimulus mapping, returned make_model_args","code":""},{"path":"http://victornavarro.org/calmr/reference/MAC1975.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train the MAC1975 model — MAC1975","text":"list vs, Array dimensions P,S,S; P number trials used train model S number stimuli involved experiment. Respectively, vs rs contain stimulus weights stimulus-specific responses. alphas, lambdas - Named vectors . combs, chains - Lists length P combined chained activation values. experience, mapping - passed arguments; carryover arguments processing.","code":""},{"path":"http://victornavarro.org/calmr/reference/NLL.html","id":null,"dir":"Reference","previous_headings":"","what":"NLL of CalmrFit — NLL","title":"NLL of CalmrFit — NLL","text":"Returns negative log likelihood model fit via calmr::fit_model","code":""},{"path":"http://victornavarro.org/calmr/reference/NLL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NLL of CalmrFit — NLL","text":"","code":"NLL(object, ...)"},{"path":"http://victornavarro.org/calmr/reference/NLL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NLL of CalmrFit — NLL","text":"object object class CalmrFit-class. ... Unused","code":""},{"path":"http://victornavarro.org/calmr/reference/NLL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NLL of CalmrFit — NLL","text":"numeric","code":""},{"path":"http://victornavarro.org/calmr/reference/PKH1982.html","id":null,"dir":"Reference","previous_headings":"","what":"Train the PKH1982 model — PKH1982","title":"Train the PKH1982 model — PKH1982","text":"Train PKH1982 model","code":""},{"path":"http://victornavarro.org/calmr/reference/PKH1982.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train the PKH1982 model — PKH1982","text":"","code":"PKH1982(   alphas,   min_alphas,   max_alphas,   betas_ex,   betas_in,   lambdas,   thetas,   gammas,   EV = NULL,   IV = NULL,   experience,   mapping )"},{"path":"http://victornavarro.org/calmr/reference/PKH1982.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train the PKH1982 model — PKH1982","text":"alphas named vector stimulus saliences. min_alphas named vector minimum stimulus saliences. max_alphas named vector maximum stimulus saliences. betas_ex named vector stimulus excitatory learning rates. betas_in named vector stimulus inhibitory learning rates. lambdas named vector stimulus asymptotes. thetas named vector stimulus attentional learning recency bias. gammas named vector stimulus contributions attentional learning rules. EV (optional) named matrix dimensions S,S; S number stimuli. Used excitatory associations. IV (optional) named matrix dimensions S,S; S number stimuli. Used inhibitory associations. experience data.frame specifying trials rows, returned make_model_args mapping named list specifying trial stimulus mapping, returned make_model_args","code":""},{"path":"http://victornavarro.org/calmr/reference/PKH1982.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train the PKH1982 model — PKH1982","text":"list vs, Array dimensions P,S,S; P number trials used train model S number stimuli involved experiment. Respectively, vs rs contain stimulus weights stimulus-specific responses. alphas, lambdas - Named vectors . combs, chains - Lists length P combined chained activation values. experience, mapping - passed arguments; carryover arguments processing.","code":""},{"path":"http://victornavarro.org/calmr/reference/RAND.html","id":null,"dir":"Reference","previous_headings":"","what":"Train the RAND model — RAND","title":"Train the RAND model — RAND","text":"Train RAND model","code":""},{"path":"http://victornavarro.org/calmr/reference/RAND.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train the RAND model — RAND","text":"","code":"RAND(alphas, V = NULL, experience, mapping)"},{"path":"http://victornavarro.org/calmr/reference/RAND.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train the RAND model — RAND","text":"alphas named vector stimulus saliences. V (optional) named matrix dimensions S,S; S number stimuli. experience data.frame specifying trials rows, returned make_model_args mapping named list specifying trial stimulus mapping, returned make_model_args","code":""},{"path":"http://victornavarro.org/calmr/reference/RAND.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train the RAND model — RAND","text":"list vs, Array dimensions P,S,S; P number trials used train model S number stimuli involved experiment. Respectively, vs rs contain stimulus weights stimulus-specific responses. alphas, lambdas - Named vectors . combs, chains - Lists length P combined chained activation values. experience, mapping - passed arguments; carryover arguments processing.","code":""},{"path":"http://victornavarro.org/calmr/reference/RSA.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform representational similarity analysis on model comparison — RSA","title":"Perform representational similarity analysis on model comparison — RSA","text":"Perform representational similarity analysis model comparison","code":""},{"path":"http://victornavarro.org/calmr/reference/RSA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform representational similarity analysis on model comparison — RSA","text":"","code":"RSA(   comparison,   trials = \"all\",   dist_method = \"euclidean\",   corr_method = \"spearman\",   ... )  RSATest(comparison, n_samples = 1000, p = 0.95, ...)"},{"path":"http://victornavarro.org/calmr/reference/RSA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform representational similarity analysis on model comparison — RSA","text":"comparison CalmrComparison object, returned compare_models trials character specifying trials use comparison. One c(\"\", \"last\"). Default \"\". See details. dist_method character specifying distance method used dist. Default \"euclidean\". corr_method character specifying correlation method used cor. Default \"spearman\". ... Additional parameters passed stats::dist stats::cor (case RSA) RSA (case RSATest). n_samples integer specifying number samples permutation test. Default 1e3. p float 0 1 specifying critical value null distribution use significance testing. Default 0.95.","code":""},{"path":"http://victornavarro.org/calmr/reference/RSA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform representational similarity analysis on model comparison — RSA","text":"CalmrRSA CalmrRSATest object.","code":""},{"path":"http://victornavarro.org/calmr/reference/RSA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform representational similarity analysis on model comparison — RSA","text":"trials argument specifyies trials use calculation distance matrices; \"\" means every trial used. \"last\" means last trial unique trial type used.","code":""},{"path":"http://victornavarro.org/calmr/reference/RW1972.html","id":null,"dir":"Reference","previous_headings":"","what":"Train the RW1972 model — RW1972","title":"Train the RW1972 model — RW1972","text":"Train RW1972 model","code":""},{"path":"http://victornavarro.org/calmr/reference/RW1972.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train the RW1972 model — RW1972","text":"","code":"RW1972(alphas, betas_on, betas_off, lambdas, V = NULL, experience, mapping)"},{"path":"http://victornavarro.org/calmr/reference/RW1972.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train the RW1972 model — RW1972","text":"alphas named vector stimulus saliences. betas_on named vector stimulus associabilities present stimuli. betas_off named vector stimulus associabilities absent stimuli. lambdas named vector stimulus asymptotes. V (optional) named matrix dimensions S,S; S number stimuli. experience data.frame specifying trials rows, returned make_model_args mapping named list specifying trial stimulus mapping, returned make_model_args","code":""},{"path":"http://victornavarro.org/calmr/reference/RW1972.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train the RW1972 model — RW1972","text":"list vs, Array dimensions P,S,S; P number trials used train model S number stimuli involved experiment. Respectively, vs rs contain stimulus weights stimulus-specific responses. alphas, lambdas - Named vectors . combs, chains - Lists length P combined chained activation values. experience, mapping - passed arguments; carryover arguments processing.","code":""},{"path":"http://victornavarro.org/calmr/reference/SM2007.html","id":null,"dir":"Reference","previous_headings":"","what":"Train the SM2007 model — SM2007","title":"Train the SM2007 model — SM2007","text":"Train SM2007 model","code":""},{"path":"http://victornavarro.org/calmr/reference/SM2007.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train the SM2007 model — SM2007","text":"","code":"SM2007(   alphas,   lambdas,   omegas,   rhos,   gammas,   taus,   orders,   V = NULL,   O = NULL,   experience,   mapping,   debug = F,   comparator_func = .witnauer_comparator_proc,   ... )"},{"path":"http://victornavarro.org/calmr/reference/SM2007.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train the SM2007 model — SM2007","text":"alphas named vector stimulus saliences. lambdas named vector learning asymptotes. omegas named vector weakening rates (extinction). rhos named vector weights activation present stimuli. gammas named vector weights contribution stimulus comparison processes. taus named vector stimulus-specific rates operator switch. orders integer specifying order comparison process. Defaults 1. V (optional) named matrix dimensions S,S (associative strengths); S number stimuli. O (optional) named matrix dimensions S,S,S (operator switches). experience data.frame specifying trials rows, returned make_model_args mapping named list specifying trial stimulus mapping, returned make_model_args debug logical specifying whether print information comparison process. Defaults FALSE. comparator_func function used comparison process. Either .witnauer_comparator_funcor .comparator_func.","code":""},{"path":"http://victornavarro.org/calmr/reference/SM2007.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train the SM2007 model — SM2007","text":"list vs, Array dimensions P,S,S; P number trials used train model S number stimuli involved experiment. Contains stimulus association strengths. acts stimulus activations. relacts (relative) stimulus activations comparison process. os Array dimensions P,S,S,S, state operator switches. See notes related O parameter. , Carryover arguments used processing functions","code":""},{"path":"http://victornavarro.org/calmr/reference/SM2007.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Train the SM2007 model — SM2007","text":"Correct usage V O parameters requires matrices adhere specific format. V, entry ,j represents association stimulus stimulus j. O, entry ,k,j represents operator switch stimulus comparator k respect stimulus j.","code":""},{"path":"http://victornavarro.org/calmr/reference/calmr_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the calmr GUI — calmr_app","title":"Run the calmr GUI — calmr_app","text":"Starts shiny application","code":""},{"path":"http://victornavarro.org/calmr/reference/calmr_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the calmr GUI — calmr_app","text":"","code":"calmr_app(browser = getOption(\"shiny.launch.browser\", interactive()))"},{"path":"http://victornavarro.org/calmr/reference/calmr_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the calmr GUI — calmr_app","text":"browser TRUE, app launched browser.","code":""},{"path":"http://victornavarro.org/calmr/reference/compare_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Run models given a set of parameters — compare_models","title":"Run models given a set of parameters — compare_models","text":"Run models given set parameters","code":""},{"path":"http://victornavarro.org/calmr/reference/compare_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run models given a set of parameters — compare_models","text":"","code":"compare_models(design, models, layers, params = NULL, options = get_exp_opts())"},{"path":"http://victornavarro.org/calmr/reference/compare_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run models given a set of parameters — compare_models","text":"design data.frame dimensions G,2*P+1; G number groups P number phases. models character vector specifying models run. layers character vector length M (length models), specifying layer model used layers. params list length M, entry containing data.frame dimensions N,2; N number stimuli experimental design. options list options, returned get_exp_opts.","code":""},{"path":"http://victornavarro.org/calmr/reference/compare_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run models given a set of parameters — compare_models","text":"CalmrComparison object.","code":""},{"path":"http://victornavarro.org/calmr/reference/fit_helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"An assortment of functions to help fit models — get_optimizer_opts","title":"An assortment of functions to help fit models — get_optimizer_opts","text":"assortment functions help fit models","code":""},{"path":"http://victornavarro.org/calmr/reference/fit_helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An assortment of functions to help fit models — get_optimizer_opts","text":"","code":"get_optimizer_opts(   model_pars,   initial_pars = rep(NA, length(model_pars)),   ll = rep(NA, length(model_pars)),   ul = rep(NA, length(model_pars)),   optimizer = NULL,   family = NULL )"},{"path":"http://victornavarro.org/calmr/reference/fit_helpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An assortment of functions to help fit models — get_optimizer_opts","text":"model_pars character vector specifying name parameters fit. initial_pars numeric vector specifying initial parameter values evaluate model (required optim). Defaults 0 parameter. ll, ul numeric vector specifying lower upper limits parameters fit, respectively optimizer string specifying optimizer use. One c(\"optim\", \"ga\") family string specifying family function generate responses (calculate likelihood function ). One c(\"identity\", \"normal\", \"poisson\").","code":""},{"path":"http://victornavarro.org/calmr/reference/fit_helpers.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"An assortment of functions to help fit models — get_optimizer_opts","text":"Whenever family function identity used, family-specific parameters always appended end relevant lists.","code":""},{"path":[]},{"path":"http://victornavarro.org/calmr/reference/fit_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit model to data — fit_model","title":"Fit model to data — fit_model","text":"Obtain MLE estimates model, given data","code":""},{"path":"http://victornavarro.org/calmr/reference/fit_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit model to data — fit_model","text":"","code":"fit_model(data, model_function, optimizer_options, file = NULL, ...)"},{"path":"http://victornavarro.org/calmr/reference/fit_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit model to data — fit_model","text":"data numeric vector containing data fit model . model_function function runs model returns data.frame r-values, organized data. optimizer_options list options optimizer, returned get_optimizer_opts. file path save model fit. arguments fit call found identical file, model just gets loaded. ... Extra parameters passed optimizer call","code":""},{"path":"http://victornavarro.org/calmr/reference/fit_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit model to data — fit_model","text":"list nloglik: negative log-likelihood model best_pars: MLE parameters model_pars: model-specific MLE parameters link_pars: link-specific MLE parameters data: data used fit model model_function: model function supplied user link_function: link function used process ll_function: log-likelihood function used search process optimizer_options: optimizer options supplied user extra_pars: extra parameters passed optimizer call via ...","code":""},{"path":"http://victornavarro.org/calmr/reference/fit_model.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Fit model to data — fit_model","text":"See calmr_fits vignette examples","code":""},{"path":[]},{"path":"http://victornavarro.org/calmr/reference/get_exp_opts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get options for an experiment — get_exp_opts","title":"Get options for an experiment — get_exp_opts","text":"Get options experiment","code":""},{"path":"http://victornavarro.org/calmr/reference/get_exp_opts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get options for an experiment — get_exp_opts","text":"","code":"get_exp_opts(iterations = 1, miniblocks = TRUE)"},{"path":"http://victornavarro.org/calmr/reference/get_exp_opts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get options for an experiment — get_exp_opts","text":"iterations integer denoting number iterations run. Default = 1. miniblocks logical denoting whether create trial miniblocks possible. Default = TRUE.","code":""},{"path":"http://victornavarro.org/calmr/reference/get_exp_opts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get options for an experiment — get_exp_opts","text":"list default user-given options.","code":""},{"path":"http://victornavarro.org/calmr/reference/get_exp_opts.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get options for an experiment — get_exp_opts","text":"miniblocks option direct sampling function (make_model_args) create equally-sized miniblocks random trials within phase. example, phase string \"2A/2B\" create two miniblocks one trial. phase string \"2A/4B\" create two miniblocks one trial, 2 B trials. However, phase string \"2A/1B\" result miniblocks, even miniblocks set TRUE.","code":""},{"path":[]},{"path":"http://victornavarro.org/calmr/reference/get_exp_opts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get options for an experiment — get_exp_opts","text":"","code":"get_exp_opts(iterations = 10) #> $iterations #> [1] 10 #>  #> $miniblocks #> [1] TRUE #>"},{"path":"http://victornavarro.org/calmr/reference/get_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a model function — get_model","title":"Return a model function — get_model","text":"Given model string, returns model function can used elsewhere package.","code":""},{"path":"http://victornavarro.org/calmr/reference/get_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a model function — get_model","text":"","code":"get_model(model_name)"},{"path":"http://victornavarro.org/calmr/reference/get_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a model function — get_model","text":"model_name string specifying model returned. One supported_models().","code":""},{"path":"http://victornavarro.org/calmr/reference/get_model_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain model parameters — get_model_params","title":"Obtain model parameters — get_model_params","text":"Obtain model parameters","code":""},{"path":"http://victornavarro.org/calmr/reference/get_model_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain model parameters — get_model_params","text":"","code":"get_model_params(design, model = NULL)"},{"path":"http://victornavarro.org/calmr/reference/get_model_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain model parameters — get_model_params","text":"design data.frame containing experimental design. model string specifying model. One supported_models().","code":""},{"path":"http://victornavarro.org/calmr/reference/get_model_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain model parameters — get_model_params","text":"data.frame model parameters, depending model.","code":""},{"path":[]},{"path":"http://victornavarro.org/calmr/reference/get_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Get output from CalmrExperiment — get_output","title":"Get output from CalmrExperiment — get_output","text":"Returns tibble containing parsed outputs CalmrExperiment","code":""},{"path":"http://victornavarro.org/calmr/reference/get_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get output from CalmrExperiment — get_output","text":"","code":"get_output(object, type = NULL)"},{"path":"http://victornavarro.org/calmr/reference/get_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get output from CalmrExperiment — get_output","text":"object object class CalmrExperiment-class. type type output","code":""},{"path":"http://victornavarro.org/calmr/reference/get_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get output from CalmrExperiment — get_output","text":"data.frame model output","code":""},{"path":"http://victornavarro.org/calmr/reference/graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Graph model associations — graph","title":"Graph model associations — graph","text":"Creates network graph model associations","code":""},{"path":"http://victornavarro.org/calmr/reference/graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graph model associations — graph","text":"","code":"graph(x, ...)"},{"path":"http://victornavarro.org/calmr/reference/graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graph model associations — graph","text":"x object class CalmrModel-class CalmrExperiment-class. ... Additional parameters passed graph_weights function.","code":""},{"path":"http://victornavarro.org/calmr/reference/graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graph model associations — graph","text":"ggplot object","code":""},{"path":"http://victornavarro.org/calmr/reference/make_model_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a tibble to fit a calmr model — make_model_args","title":"Make a tibble to fit a calmr model — make_model_args","text":"Make tibble fit calmr model","code":""},{"path":"http://victornavarro.org/calmr/reference/make_model_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a tibble to fit a calmr model — make_model_args","text":"","code":"make_model_args(design, pars = NULL, model = NULL, opts = get_exp_opts())"},{"path":"http://victornavarro.org/calmr/reference/make_model_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a tibble to fit a calmr model — make_model_args","text":"design design data.frame pars data.frame containing parameters returned get_model_params model string specifying model name. One supported_models() opts list options returned get_exp_opts","code":""},{"path":"http://victornavarro.org/calmr/reference/make_model_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a tibble to fit a calmr model — make_model_args","text":"tibble arguments required run model. row represents group experimental design.","code":""},{"path":[]},{"path":"http://victornavarro.org/calmr/reference/make_model_args.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a tibble to fit a calmr model — make_model_args","text":"","code":"des <- data.frame(Group = \"G1\", P1 = \"10A>(US)\", R1 = TRUE) ps <- get_model_params(des, model = \"HD2022\") op <- get_exp_opts(iterations = 1) make_model_args(design = des, pars = ps, model = \"HD2022\", opts = op) #> # A tibble: 1 × 6 #>   model  iteration group experience    mapping          alphas    #>   <chr>      <int> <chr> <list>        <list>           <list>    #> 1 HD2022         1 G1    <df [10 × 5]> <named list [9]> <dbl [2]>"},{"path":"http://victornavarro.org/calmr/reference/model_info_funcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Miscellaneous information functions — supported_models","title":"Miscellaneous information functions — supported_models","text":"Miscellaneous information functions","code":""},{"path":"http://victornavarro.org/calmr/reference/model_info_funcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Miscellaneous information functions — supported_models","text":"","code":"supported_models()  supported_optimizers()  supported_families()  supported_plots(model = NULL)"},{"path":"http://victornavarro.org/calmr/reference/model_info_funcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Miscellaneous information functions — supported_models","text":"model string specifying model. One supported_models()","code":""},{"path":"http://victornavarro.org/calmr/reference/model_info_funcs.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Miscellaneous information functions — supported_models","text":"supported_models returns models supported package. supported_plots returns plots supported argument model. supported_families returns families supported fit_model. supported_optimizers returns optimizers supported fit_model. suported_plots returns plots supported argument model.","code":""},{"path":"http://victornavarro.org/calmr/reference/parse_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse each string in a design data.frame — parse_design","title":"Parse each string in a design data.frame — parse_design","text":"Parse string design data.frame","code":""},{"path":"http://victornavarro.org/calmr/reference/parse_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse each string in a design data.frame — parse_design","text":"","code":"parse_design(df)"},{"path":"http://victornavarro.org/calmr/reference/parse_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse each string in a design data.frame — parse_design","text":"df data.frame dimensions Groups, 2*Phases+1","code":""},{"path":"http://victornavarro.org/calmr/reference/parse_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse each string in a design data.frame — parse_design","text":"tibble containing parsed design long format raw design.","code":""},{"path":"http://victornavarro.org/calmr/reference/parse_design.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Parse each string in a design data.frame — parse_design","text":"entry even-numbered columns df string formatted per trial_parser.","code":""},{"path":[]},{"path":"http://victornavarro.org/calmr/reference/parse_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse each string in a design data.frame — parse_design","text":"","code":"df <- data.frame(Group = c('Group 1', 'Group 2'), P1 = c('10AB(US)', '10A(US)'), R1 = c(TRUE, TRUE)) parse_design(df) #> # A tibble: 2 × 5 #>   group   phase parse_string randomize trial_info        #>   <chr>   <chr> <chr>        <lgl>     <list>            #> 1 Group 1 P1    10AB(US)     TRUE      <named list [11]> #> 2 Group 2 P1    10A(US)      TRUE      <named list [11]>"},{"path":"http://victornavarro.org/calmr/reference/pati.html","id":null,"dir":"Reference","previous_headings":"","what":"Rat responses from Patittucci et al. 2016 — pati","title":"Rat responses from Patittucci et al. 2016 — pati","text":"dataset containing rat nose pokes lever presses levers associated different appetitive stimuli.","code":""},{"path":"http://victornavarro.org/calmr/reference/pati.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rat responses from Patittucci et al. 2016 — pati","text":"","code":"pati"},{"path":"http://victornavarro.org/calmr/reference/pati.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Rat responses from Patittucci et al. 2016 — pati","text":"tibble following variables: subject subject identifier block 2-session block training (1 8) lever lever presented trial: L = left; R = right us stimulus followed lever: P = pellet; S = sucrose response response: lp = lever press; np = nose poke rpert responses per trial","code":""},{"path":"http://victornavarro.org/calmr/reference/pati.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Rat responses from Patittucci et al. 2016 — pati","text":"Patittucci et al. (2016). JEP:ALC","code":""},{"path":"http://victornavarro.org/calmr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"http://victornavarro.org/calmr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"http://victornavarro.org/calmr/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"http://victornavarro.org/calmr/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"http://victornavarro.org/calmr/reference/plot-CalmrRSA-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot RSA — plot,CalmrRSA-method","title":"Plot RSA — plot,CalmrRSA-method","text":"Plot correlogram RSA results","code":""},{"path":"http://victornavarro.org/calmr/reference/plot-CalmrRSA-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot RSA — plot,CalmrRSA-method","text":"","code":"# S4 method for CalmrRSA plot(x, y, ...)"},{"path":"http://victornavarro.org/calmr/reference/plot-CalmrRSA-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot RSA — plot,CalmrRSA-method","text":"x object class CalmrRSA-class. ... Additional parameters passed plotting function.","code":""},{"path":"http://victornavarro.org/calmr/reference/plot-CalmrRSA-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot RSA — plot,CalmrRSA-method","text":"ggplot object","code":""},{"path":"http://victornavarro.org/calmr/reference/plot-CalmrRSATest-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot RSA test — plot,CalmrRSATest-method","title":"Plot RSA test — plot,CalmrRSATest-method","text":"Plot correlogram RSA test results","code":""},{"path":"http://victornavarro.org/calmr/reference/plot-CalmrRSATest-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot RSA test — plot,CalmrRSATest-method","text":"","code":"# S4 method for CalmrRSATest plot(x, y, ...)"},{"path":"http://victornavarro.org/calmr/reference/plot-CalmrRSATest-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot RSA test — plot,CalmrRSATest-method","text":"x object class CalmrRSATest-class. ... Additional parameters passed plotting function.","code":""},{"path":"http://victornavarro.org/calmr/reference/plot-CalmrRSATest-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot RSA test — plot,CalmrRSATest-method","text":"ggplot object","code":""},{"path":"http://victornavarro.org/calmr/reference/plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot CalmrExperiment — plot,CalmrExperiment-method","title":"Plot CalmrExperiment — plot,CalmrExperiment-method","text":"Creates plot depicting results CalmrExperiment","code":""},{"path":"http://victornavarro.org/calmr/reference/plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot CalmrExperiment — plot,CalmrExperiment-method","text":"","code":"# S4 method for CalmrExperiment plot(x, type = NULL, y = NULL, ...)"},{"path":"http://victornavarro.org/calmr/reference/plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot CalmrExperiment — plot,CalmrExperiment-method","text":"x object class CalmrExperiment-class. type string specifying type plot create. See ??supported_plots. ... Additional parameters passed plotting function.","code":""},{"path":"http://victornavarro.org/calmr/reference/plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot CalmrExperiment — plot,CalmrExperiment-method","text":"ggplot object","code":""},{"path":"http://victornavarro.org/calmr/reference/predict-CalmrFit-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict from CalmrFit — predict,CalmrFit-method","title":"Predict from CalmrFit — predict,CalmrFit-method","text":"Obtain prediction CalmrFit","code":""},{"path":"http://victornavarro.org/calmr/reference/predict-CalmrFit-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict from CalmrFit — predict,CalmrFit-method","text":"","code":"# S4 method for CalmrFit predict(object, type = \"response\", ...)"},{"path":"http://victornavarro.org/calmr/reference/predict-CalmrFit-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict from CalmrFit — predict,CalmrFit-method","text":"object object class CalmrFit-class. type string. response, model responses transformed via link function. ... Additional parameters passed function (object@model_function).","code":""},{"path":"http://victornavarro.org/calmr/reference/run_experiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Run experiment — run_experiment","title":"Run experiment — run_experiment","text":"Runs experiment minimal parameters.","code":""},{"path":"http://victornavarro.org/calmr/reference/run_experiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run experiment — run_experiment","text":"","code":"run_experiment(   design,   model = NULL,   param_df = NULL,   options = NULL,   parse = TRUE,   ... )"},{"path":"http://victornavarro.org/calmr/reference/run_experiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run experiment — run_experiment","text":"design data.frame dimensions G,2*P+1; G number groups P number phases. model string specifying model name. One supported_models() param_df data.frame dimensions N,2; N number stimuli experimental design. options list options, returned get_exp_opts. parse logical specifying whether results parsed via parse_experiment_results. Default = TRUE. ... Extra parameters passed model call (e.g., debug)","code":""},{"path":"http://victornavarro.org/calmr/reference/run_experiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run experiment — run_experiment","text":"list parsed results tibble raw results","code":""},{"path":[]},{"path":"http://victornavarro.org/calmr/reference/run_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a model — run_model","title":"Run a model — run_model","text":"Runs model specific arguments.","code":""},{"path":"http://victornavarro.org/calmr/reference/run_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a model — run_model","text":"","code":"run_model(args, parse = T, ...)"},{"path":"http://victornavarro.org/calmr/reference/run_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a model — run_model","text":"args tibble returned make_model_args. parse logical specifying whether results parsed.","code":""},{"path":"http://victornavarro.org/calmr/reference/run_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a model — run_model","text":"CalmrExperiment object.","code":""},{"path":[]},{"path":"http://victornavarro.org/calmr/reference/summary-CalmrExperiment-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise CalmrExperiment — summary,CalmrExperiment-method","title":"Summarise CalmrExperiment — summary,CalmrExperiment-method","text":"Shows summary CalmrExperiment","code":""},{"path":"http://victornavarro.org/calmr/reference/summary-CalmrExperiment-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise CalmrExperiment — summary,CalmrExperiment-method","text":"","code":"# S4 method for CalmrExperiment summary(object, ...)"},{"path":"http://victornavarro.org/calmr/reference/summary-CalmrExperiment-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise CalmrExperiment — summary,CalmrExperiment-method","text":"object object class CalmrExperiment-class. ... Additional parameters passed summary function.","code":""},{"path":[]},{"path":"http://victornavarro.org/calmr/reference/trial_parser.html","id":null,"dir":"Reference","previous_headings":"","what":"Parses a string stipulating trials — trial_parser","title":"Parses a string stipulating trials — trial_parser","text":"Parses string stipulating trials","code":""},{"path":"http://victornavarro.org/calmr/reference/trial_parser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parses a string stipulating trials — trial_parser","text":"","code":"trial_parser(trial_string)"},{"path":"http://victornavarro.org/calmr/reference/trial_parser.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parses a string stipulating trials — trial_parser","text":"trial_string string","code":""},{"path":"http://victornavarro.org/calmr/reference/trial_parser.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parses a string stipulating trials — trial_parser","text":"list trial_names: character vector specifying names trials contained string trial_repeats: numeric vector specifying number times trial given trial_pre_functional: list character vectors specifying unique functional stimuli expectation part trial trial_post_functional: list character vectors specifying unique functional stimuli correction part trial trial_pre_nominal: list character vectors specifying nominal stimuli expectation part trial trial_post_nominal: list character vectors specifying nominal stimuli expectation part trial nomi_func_map: data.frame specifying mapping functional nominal stimuli unique_nominal stimuli: character vector unique nominal stimuli unique_functional_stimuli: character vector unique functional stimuli is_test: logical vector specifying whether trial result learning","code":""},{"path":"http://victornavarro.org/calmr/reference/trial_parser.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Parses a string stipulating trials — trial_parser","text":"Supports complex stimuli parentheses (e.g., \"5A>(US)\") Supports multiple nominal versions stimuli (e.g., \"3(A_a)>(US_a)/3(A_b)>(US_b)\") Supports probe trials followed hash (e.g., \"3X#\") trials \">\" character, assumed specified stimuli used expectation step. , \"post\" entries list contain NAs, necessary. trials, \"post\" stimuli none (character(0) vector).","code":""},{"path":"http://victornavarro.org/calmr/reference/trial_parser.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parses a string stipulating trials — trial_parser","text":"","code":"trial_parser(\"30A\") #> $trial_names #> [1] \"A\" #>  #> $trial_repeats #> [1] 30 #>  #> $trial_pre_functional #> $trial_pre_functional[[1]] #> [1] \"A\" #>  #>  #> $trial_post_functional #> $trial_post_functional[[1]] #> character(0) #>  #>  #> $trial_pre_nominal #> $trial_pre_nominal[[1]] #> [1] \"A\" #>  #>  #> $trial_post_nominal #> $trial_post_nominal[[1]] #> character(0) #>  #>  #> $nomi2func #>   A  #> \"A\"  #>  #> $func2nomi #>   A  #> \"A\"  #>  #> $unique_nominal_stimuli #> [1] \"A\" #>  #> $unique_functional_stimuli #> [1] \"A\" #>  #> $is_test #> [1] FALSE #>  trial_parser(\"30XA>U/30(YA)>A\") #> $trial_names #> [1] \"XA>U\"   \"(YA)>A\" #>  #> $trial_repeats #> [1] 30 30 #>  #> $trial_pre_functional #> $trial_pre_functional[[1]] #> [1] \"X\" \"A\" #>  #> $trial_pre_functional[[2]] #> [1] \"YA\" #>  #>  #> $trial_post_functional #> $trial_post_functional[[1]] #> [1] \"U\" #>  #> $trial_post_functional[[2]] #> [1] \"A\" #>  #>  #> $trial_pre_nominal #> $trial_pre_nominal[[1]] #> [1] \"X\" \"A\" #>  #> $trial_pre_nominal[[2]] #> [1] \"YA\" #>  #>  #> $trial_post_nominal #> $trial_post_nominal[[1]] #> [1] \"U\" #>  #> $trial_post_nominal[[2]] #> [1] \"A\" #>  #>  #> $nomi2func #>    X    A   YA    U  #>  \"X\"  \"A\" \"YA\"  \"U\"  #>  #> $func2nomi #>    X    A   YA    U  #>  \"X\"  \"A\" \"YA\"  \"U\"  #>  #> $unique_nominal_stimuli #> [1] \"X\"  \"A\"  \"U\"  \"YA\" #>  #> $unique_functional_stimuli #> [1] \"X\"  \"A\"  \"YA\" \"U\"  #>  #> $is_test #> [1] FALSE FALSE #>  trial_parser(\"1X#/2X>(US)#\") #> $trial_names #> [1] \"X#\"      \"X>(US)#\" #>  #> $trial_repeats #> [1] 1 2 #>  #> $trial_pre_functional #> $trial_pre_functional[[1]] #> [1] \"X\" #>  #> $trial_pre_functional[[2]] #> [1] \"X\" #>  #>  #> $trial_post_functional #> $trial_post_functional[[1]] #> character(0) #>  #> $trial_post_functional[[2]] #> [1] \"US\" #>  #>  #> $trial_pre_nominal #> $trial_pre_nominal[[1]] #> [1] \"X\" #>  #> $trial_pre_nominal[[2]] #> [1] \"X\" #>  #>  #> $trial_post_nominal #> $trial_post_nominal[[1]] #> character(0) #>  #> $trial_post_nominal[[2]] #> [1] \"US\" #>  #>  #> $nomi2func #>    X   US  #>  \"X\" \"US\"  #>  #> $func2nomi #>    X   US  #>  \"X\" \"US\"  #>  #> $unique_nominal_stimuli #> [1] \"X\"  \"US\" #>  #> $unique_functional_stimuli #> [1] \"X\"  \"US\" #>  #> $is_test #> [1] TRUE TRUE #>  trial_parser(\"1X>(US_a)/1Y>(US_b)\") #> $trial_names #> [1] \"X>(US_a)\" \"Y>(US_b)\" #>  #> $trial_repeats #> [1] 1 1 #>  #> $trial_pre_functional #> $trial_pre_functional[[1]] #> [1] \"X\" #>  #> $trial_pre_functional[[2]] #> [1] \"Y\" #>  #>  #> $trial_post_functional #> $trial_post_functional[[1]] #> [1] \"US\" #>  #> $trial_post_functional[[2]] #> [1] \"US\" #>  #>  #> $trial_pre_nominal #> $trial_pre_nominal[[1]] #> [1] \"X\" #>  #> $trial_pre_nominal[[2]] #> [1] \"Y\" #>  #>  #> $trial_post_nominal #> $trial_post_nominal[[1]] #> [1] \"US_a\" #>  #> $trial_post_nominal[[2]] #> [1] \"US_b\" #>  #>  #> $nomi2func #>    X    Y US_a US_b  #>  \"X\"  \"Y\" \"US\" \"US\"  #>  #> $func2nomi #>      X      Y     US     US  #>    \"X\"    \"Y\" \"US_a\" \"US_b\"  #>  #> $unique_nominal_stimuli #> [1] \"X\"    \"Y\"    \"US_a\" \"US_b\" #>  #> $unique_functional_stimuli #> [1] \"X\"  \"Y\"  \"US\" #>  #> $is_test #> [1] FALSE FALSE #>"},{"path":"http://victornavarro.org/calmr/news/index.html","id":"calmr-030","dir":"Changelog","previous_headings":"","what":"calmr 0.3.0","title":"calmr 0.3.0","text":"Added first version SOCR model (SM2007) well two vignettes explaining math behind implementation quick simulations. Warning: EXPERIMENTAL. Documentation progress.","code":""},{"path":"http://victornavarro.org/calmr/news/index.html","id":"calmr-020","dir":"Changelog","previous_headings":"","what":"calmr 0.2.0","title":"calmr 0.2.0","text":"Added multiple models package app (RW1972, PKH1982, MAC1975). Implementation basic S4 classes model, experiment, fit, RSA comparison objects, well methods. Added genetic algorithms (via GA) parameter estimation. Added basic tools perform representational similarity analysis. Documentation progress.","code":""},{"path":"http://victornavarro.org/calmr/news/index.html","id":"calmr-010","dir":"Changelog","previous_headings":"","what":"calmr 0.1.0","title":"calmr 0.1.0","text":"heidi now calmr: Canonical Associative Learning Models R. package now aims maintain several associative learning models implement tools use. Major overhaul training function (train_pav_model). relevant calculations now done function functional stimuli instead just US. Support specification expectation/correction steps within trial via “>”. example, trial “>(US)” use generate expectation, learn stimuli correction step. previous plotting function R-values revamped allow simple complex versions. complex version facets r-values predictor basis, uses colour lines target. Bugfix related stimulus saliencies.","code":""}]
